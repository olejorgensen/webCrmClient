/* 
 * webCRM REST API
 *
 * Version: 1.0.0.0.<br>Note that you can access live data through this web site, so be careful when updating or deleting things.
 *
 * OpenAPI spec version: v1
 * Contact: api@webcrm.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;

namespace WebCrm.Rest.Model
{
    /// <summary>
    /// DocumentDto
    /// </summary>
    [DataContract]
    public partial class DocumentDto : BaseObject, IEquatable<DocumentDto>, IValidatableObject
    {
        /// <summary>
        /// Defines DocumentLinkedEntityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DocumentLinkedEntityTypeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Organisation for value: Organisation
            /// </summary>
            [EnumMember(Value = "Organisation")]
            Organisation = 2,
            
            /// <summary>
            /// Enum Person for value: Person
            /// </summary>
            [EnumMember(Value = "Person")]
            Person = 3,
            
            /// <summary>
            /// Enum Activity for value: Activity
            /// </summary>
            [EnumMember(Value = "Activity")]
            Activity = 4,
            
            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 5,
            
            /// <summary>
            /// Enum Opportunity for value: Opportunity
            /// </summary>
            [EnumMember(Value = "Opportunity")]
            Opportunity = 6,
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 7,
            
            /// <summary>
            /// Enum Meeting for value: Meeting
            /// </summary>
            [EnumMember(Value = "Meeting")]
            Meeting = 8,
            
            /// <summary>
            /// Enum Support for value: Support
            /// </summary>
            [EnumMember(Value = "Support")]
            Support = 9
        }

        /// <summary>
        /// Gets or Sets DocumentLinkedEntityType
        /// </summary>
        [DataMember(Name="DocumentLinkedEntityType", EmitDefaultValue=false)]
        public DocumentLinkedEntityTypeEnum? DocumentLinkedEntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDto" /> class.
        /// </summary>
        [JsonConstructor]
        protected DocumentDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDto" /> class.
        /// </summary>
        /// <param name="DocumentId">DocumentId (required).</param>
        /// <param name="DocumentCampaignPublic">DocumentCampaignPublic.</param>
        /// <param name="DocumentCreatedAt">DocumentCreatedAt.</param>
        /// <param name="DocumentCreatedBy">DocumentCreatedBy.</param>
        /// <param name="DocumentDescription">DocumentDescription.</param>
        /// <param name="DocumentFile">DocumentFile.</param>
        /// <param name="DocumentFileCode">DocumentFileCode.</param>
        /// <param name="DocumentFileExtension">DocumentFileExtension.</param>
        /// <param name="DocumentFileName">DocumentFileName.</param>
        /// <param name="DocumentFileSize">DocumentFileSize.</param>
        /// <param name="DocumentFolder">DocumentFolder.</param>
        /// <param name="DocumentIsAllowedAsAttachment">DocumentIsAllowedAsAttachment.</param>
        /// <param name="DocumentLanguageCode">DocumentLanguageCode.</param>
        /// <param name="DocumentLastUpdatedAt">DocumentLastUpdatedAt.</param>
        /// <param name="DocumentLastUpdatedBy">DocumentLastUpdatedBy.</param>
        /// <param name="DocumentLinkedEntityType">DocumentLinkedEntityType.</param>
        /// <param name="DocumentLinkedEntityId">DocumentLinkedEntityId.</param>
        /// <param name="DocumentOrganisationId">DocumentOrganisationId.</param>
        /// <param name="DocumentPublicLink">DocumentPublicLink.</param>
        /// <param name="DocumentTerritory">DocumentTerritory.</param>
        /// <param name="DocumentUserGroup">DocumentUserGroup.</param>
        /// <param name="DocumentUserId">DocumentUserId.</param>
        /// <param name="DocumentUploadedAt">DocumentUploadedAt.</param>
        /// <param name="DocumentUploadCount">DocumentUploadCount.</param>
        public DocumentDto(int? DocumentId = default(int?), string DocumentCampaignPublic = default(string), DateTime? DocumentCreatedAt = default(DateTime?), string DocumentCreatedBy = default(string), string DocumentDescription = default(string), string DocumentFile = default(string), string DocumentFileCode = default(string), string DocumentFileExtension = default(string), string DocumentFileName = default(string), int? DocumentFileSize = default(int?), string DocumentFolder = default(string), bool? DocumentIsAllowedAsAttachment = default(bool?), int? DocumentLanguageCode = default(int?), DateTime? DocumentLastUpdatedAt = default(DateTime?), string DocumentLastUpdatedBy = default(string), DocumentLinkedEntityTypeEnum? DocumentLinkedEntityType = default(DocumentLinkedEntityTypeEnum?), int? DocumentLinkedEntityId = default(int?), int? DocumentOrganisationId = default(int?), string DocumentPublicLink = default(string), int? DocumentTerritory = default(int?), int? DocumentUserGroup = default(int?), int? DocumentUserId = default(int?), DateTime? DocumentUploadedAt = default(DateTime?), int? DocumentUploadCount = default(int?))
        {
            // to ensure "DocumentId" is required (not null)
            if (DocumentId == null)
            {
                throw new InvalidDataException("DocumentId is a required property for DocumentDto and cannot be null");
            }
            else
            {
                this.DocumentId = DocumentId;
            }
            this.DocumentCampaignPublic = DocumentCampaignPublic;
            this.DocumentCreatedAt = DocumentCreatedAt;
            this.DocumentCreatedBy = DocumentCreatedBy;
            this.DocumentDescription = DocumentDescription;
            this.DocumentFile = DocumentFile;
            this.DocumentFileCode = DocumentFileCode;
            this.DocumentFileExtension = DocumentFileExtension;
            this.DocumentFileName = DocumentFileName;
            this.DocumentFileSize = DocumentFileSize;
            this.DocumentFolder = DocumentFolder;
            this.DocumentIsAllowedAsAttachment = DocumentIsAllowedAsAttachment;
            this.DocumentLanguageCode = DocumentLanguageCode;
            this.DocumentLastUpdatedAt = DocumentLastUpdatedAt;
            this.DocumentLastUpdatedBy = DocumentLastUpdatedBy;
            this.DocumentLinkedEntityType = DocumentLinkedEntityType;
            this.DocumentLinkedEntityId = DocumentLinkedEntityId;
            this.DocumentOrganisationId = DocumentOrganisationId;
            this.DocumentPublicLink = DocumentPublicLink;
            this.DocumentTerritory = DocumentTerritory;
            this.DocumentUserGroup = DocumentUserGroup;
            this.DocumentUserId = DocumentUserId;
            this.DocumentUploadedAt = DocumentUploadedAt;
            this.DocumentUploadCount = DocumentUploadCount;
        }
        
        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="DocumentId", EmitDefaultValue=false)]
        public int? DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentCampaignPublic
        /// </summary>
        [DataMember(Name="DocumentCampaignPublic", EmitDefaultValue=false)]
        public string DocumentCampaignPublic { get; set; }

        /// <summary>
        /// Gets or Sets DocumentCreatedAt
        /// </summary>
        [DataMember(Name="DocumentCreatedAt", EmitDefaultValue=false)]
        public DateTime? DocumentCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentCreatedBy
        /// </summary>
        [DataMember(Name="DocumentCreatedBy", EmitDefaultValue=false)]
        public string DocumentCreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDescription
        /// </summary>
        [DataMember(Name="DocumentDescription", EmitDefaultValue=false)]
        public string DocumentDescription { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFile
        /// </summary>
        [DataMember(Name="DocumentFile", EmitDefaultValue=false)]
        public string DocumentFile { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFileCode
        /// </summary>
        [DataMember(Name="DocumentFileCode", EmitDefaultValue=false)]
        public string DocumentFileCode { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFileExtension
        /// </summary>
        [DataMember(Name="DocumentFileExtension", EmitDefaultValue=false)]
        public string DocumentFileExtension { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFileName
        /// </summary>
        [DataMember(Name="DocumentFileName", EmitDefaultValue=false)]
        public string DocumentFileName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFileSize
        /// </summary>
        [DataMember(Name="DocumentFileSize", EmitDefaultValue=false)]
        public int? DocumentFileSize { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFolder
        /// </summary>
        [DataMember(Name="DocumentFolder", EmitDefaultValue=false)]
        public string DocumentFolder { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIsAllowedAsAttachment
        /// </summary>
        [DataMember(Name="DocumentIsAllowedAsAttachment", EmitDefaultValue=false)]
        public bool? DocumentIsAllowedAsAttachment { get; set; }

        /// <summary>
        /// Gets or Sets DocumentLanguageCode
        /// </summary>
        [DataMember(Name="DocumentLanguageCode", EmitDefaultValue=false)]
        public int? DocumentLanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets DocumentLastUpdatedAt
        /// </summary>
        [DataMember(Name="DocumentLastUpdatedAt", EmitDefaultValue=false)]
        public DateTime? DocumentLastUpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentLastUpdatedBy
        /// </summary>
        [DataMember(Name="DocumentLastUpdatedBy", EmitDefaultValue=false)]
        public string DocumentLastUpdatedBy { get; set; }


        /// <summary>
        /// Gets or Sets DocumentLinkedEntityId
        /// </summary>
        [DataMember(Name="DocumentLinkedEntityId", EmitDefaultValue=false)]
        public int? DocumentLinkedEntityId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentOrganisationId
        /// </summary>
        [DataMember(Name="DocumentOrganisationId", EmitDefaultValue=false)]
        public int? DocumentOrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentPublicLink
        /// </summary>
        [DataMember(Name="DocumentPublicLink", EmitDefaultValue=false)]
        public string DocumentPublicLink { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTerritory
        /// </summary>
        [DataMember(Name="DocumentTerritory", EmitDefaultValue=false)]
        public int? DocumentTerritory { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUserGroup
        /// </summary>
        [DataMember(Name="DocumentUserGroup", EmitDefaultValue=false)]
        public int? DocumentUserGroup { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUserId
        /// </summary>
        [DataMember(Name="DocumentUserId", EmitDefaultValue=false)]
        public int? DocumentUserId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUploadedAt
        /// </summary>
        [DataMember(Name="DocumentUploadedAt", EmitDefaultValue=false)]
        public DateTime? DocumentUploadedAt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUploadCount
        /// </summary>
        [DataMember(Name="DocumentUploadCount", EmitDefaultValue=false)]
        public int? DocumentUploadCount { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDto);
        }

        /// <summary>
        /// Returns true if DocumentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentCampaignPublic == input.DocumentCampaignPublic ||
                    (this.DocumentCampaignPublic != null &&
                    this.DocumentCampaignPublic.Equals(input.DocumentCampaignPublic))
                ) && 
                (
                    this.DocumentCreatedAt == input.DocumentCreatedAt ||
                    (this.DocumentCreatedAt != null &&
                    this.DocumentCreatedAt.Equals(input.DocumentCreatedAt))
                ) && 
                (
                    this.DocumentCreatedBy == input.DocumentCreatedBy ||
                    (this.DocumentCreatedBy != null &&
                    this.DocumentCreatedBy.Equals(input.DocumentCreatedBy))
                ) && 
                (
                    this.DocumentDescription == input.DocumentDescription ||
                    (this.DocumentDescription != null &&
                    this.DocumentDescription.Equals(input.DocumentDescription))
                ) && 
                (
                    this.DocumentFile == input.DocumentFile ||
                    (this.DocumentFile != null &&
                    this.DocumentFile.Equals(input.DocumentFile))
                ) && 
                (
                    this.DocumentFileCode == input.DocumentFileCode ||
                    (this.DocumentFileCode != null &&
                    this.DocumentFileCode.Equals(input.DocumentFileCode))
                ) && 
                (
                    this.DocumentFileExtension == input.DocumentFileExtension ||
                    (this.DocumentFileExtension != null &&
                    this.DocumentFileExtension.Equals(input.DocumentFileExtension))
                ) && 
                (
                    this.DocumentFileName == input.DocumentFileName ||
                    (this.DocumentFileName != null &&
                    this.DocumentFileName.Equals(input.DocumentFileName))
                ) && 
                (
                    this.DocumentFileSize == input.DocumentFileSize ||
                    (this.DocumentFileSize != null &&
                    this.DocumentFileSize.Equals(input.DocumentFileSize))
                ) && 
                (
                    this.DocumentFolder == input.DocumentFolder ||
                    (this.DocumentFolder != null &&
                    this.DocumentFolder.Equals(input.DocumentFolder))
                ) && 
                (
                    this.DocumentIsAllowedAsAttachment == input.DocumentIsAllowedAsAttachment ||
                    (this.DocumentIsAllowedAsAttachment != null &&
                    this.DocumentIsAllowedAsAttachment.Equals(input.DocumentIsAllowedAsAttachment))
                ) && 
                (
                    this.DocumentLanguageCode == input.DocumentLanguageCode ||
                    (this.DocumentLanguageCode != null &&
                    this.DocumentLanguageCode.Equals(input.DocumentLanguageCode))
                ) && 
                (
                    this.DocumentLastUpdatedAt == input.DocumentLastUpdatedAt ||
                    (this.DocumentLastUpdatedAt != null &&
                    this.DocumentLastUpdatedAt.Equals(input.DocumentLastUpdatedAt))
                ) && 
                (
                    this.DocumentLastUpdatedBy == input.DocumentLastUpdatedBy ||
                    (this.DocumentLastUpdatedBy != null &&
                    this.DocumentLastUpdatedBy.Equals(input.DocumentLastUpdatedBy))
                ) && 
                (
                    this.DocumentLinkedEntityType == input.DocumentLinkedEntityType ||
                    (this.DocumentLinkedEntityType != null &&
                    this.DocumentLinkedEntityType.Equals(input.DocumentLinkedEntityType))
                ) && 
                (
                    this.DocumentLinkedEntityId == input.DocumentLinkedEntityId ||
                    (this.DocumentLinkedEntityId != null &&
                    this.DocumentLinkedEntityId.Equals(input.DocumentLinkedEntityId))
                ) && 
                (
                    this.DocumentOrganisationId == input.DocumentOrganisationId ||
                    (this.DocumentOrganisationId != null &&
                    this.DocumentOrganisationId.Equals(input.DocumentOrganisationId))
                ) && 
                (
                    this.DocumentPublicLink == input.DocumentPublicLink ||
                    (this.DocumentPublicLink != null &&
                    this.DocumentPublicLink.Equals(input.DocumentPublicLink))
                ) && 
                (
                    this.DocumentTerritory == input.DocumentTerritory ||
                    (this.DocumentTerritory != null &&
                    this.DocumentTerritory.Equals(input.DocumentTerritory))
                ) && 
                (
                    this.DocumentUserGroup == input.DocumentUserGroup ||
                    (this.DocumentUserGroup != null &&
                    this.DocumentUserGroup.Equals(input.DocumentUserGroup))
                ) && 
                (
                    this.DocumentUserId == input.DocumentUserId ||
                    (this.DocumentUserId != null &&
                    this.DocumentUserId.Equals(input.DocumentUserId))
                ) && 
                (
                    this.DocumentUploadedAt == input.DocumentUploadedAt ||
                    (this.DocumentUploadedAt != null &&
                    this.DocumentUploadedAt.Equals(input.DocumentUploadedAt))
                ) && 
                (
                    this.DocumentUploadCount == input.DocumentUploadCount ||
                    (this.DocumentUploadCount != null &&
                    this.DocumentUploadCount.Equals(input.DocumentUploadCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentCampaignPublic != null)
                    hashCode = hashCode * 59 + this.DocumentCampaignPublic.GetHashCode();
                if (this.DocumentCreatedAt != null)
                    hashCode = hashCode * 59 + this.DocumentCreatedAt.GetHashCode();
                if (this.DocumentCreatedBy != null)
                    hashCode = hashCode * 59 + this.DocumentCreatedBy.GetHashCode();
                if (this.DocumentDescription != null)
                    hashCode = hashCode * 59 + this.DocumentDescription.GetHashCode();
                if (this.DocumentFile != null)
                    hashCode = hashCode * 59 + this.DocumentFile.GetHashCode();
                if (this.DocumentFileCode != null)
                    hashCode = hashCode * 59 + this.DocumentFileCode.GetHashCode();
                if (this.DocumentFileExtension != null)
                    hashCode = hashCode * 59 + this.DocumentFileExtension.GetHashCode();
                if (this.DocumentFileName != null)
                    hashCode = hashCode * 59 + this.DocumentFileName.GetHashCode();
                if (this.DocumentFileSize != null)
                    hashCode = hashCode * 59 + this.DocumentFileSize.GetHashCode();
                if (this.DocumentFolder != null)
                    hashCode = hashCode * 59 + this.DocumentFolder.GetHashCode();
                if (this.DocumentIsAllowedAsAttachment != null)
                    hashCode = hashCode * 59 + this.DocumentIsAllowedAsAttachment.GetHashCode();
                if (this.DocumentLanguageCode != null)
                    hashCode = hashCode * 59 + this.DocumentLanguageCode.GetHashCode();
                if (this.DocumentLastUpdatedAt != null)
                    hashCode = hashCode * 59 + this.DocumentLastUpdatedAt.GetHashCode();
                if (this.DocumentLastUpdatedBy != null)
                    hashCode = hashCode * 59 + this.DocumentLastUpdatedBy.GetHashCode();
                if (this.DocumentLinkedEntityType != null)
                    hashCode = hashCode * 59 + this.DocumentLinkedEntityType.GetHashCode();
                if (this.DocumentLinkedEntityId != null)
                    hashCode = hashCode * 59 + this.DocumentLinkedEntityId.GetHashCode();
                if (this.DocumentOrganisationId != null)
                    hashCode = hashCode * 59 + this.DocumentOrganisationId.GetHashCode();
                if (this.DocumentPublicLink != null)
                    hashCode = hashCode * 59 + this.DocumentPublicLink.GetHashCode();
                if (this.DocumentTerritory != null)
                    hashCode = hashCode * 59 + this.DocumentTerritory.GetHashCode();
                if (this.DocumentUserGroup != null)
                    hashCode = hashCode * 59 + this.DocumentUserGroup.GetHashCode();
                if (this.DocumentUserId != null)
                    hashCode = hashCode * 59 + this.DocumentUserId.GetHashCode();
                if (this.DocumentUploadedAt != null)
                    hashCode = hashCode * 59 + this.DocumentUploadedAt.GetHashCode();
                if (this.DocumentUploadCount != null)
                    hashCode = hashCode * 59 + this.DocumentUploadCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
