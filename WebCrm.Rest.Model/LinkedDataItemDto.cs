/* 
 * webCRM REST API
 *
 * Version: 1.0.0.0.<br>Note that you can access live data through this web site, so be careful when updating or deleting things.
 *
 * OpenAPI spec version: v1
 * Contact: api@webcrm.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;

namespace WebCrm.Rest.Model
{
    /// <summary>
    /// LinkedDataItemDto
    /// </summary>
    [DataContract]
    public partial class LinkedDataItemDto : BaseObject, IEquatable<LinkedDataItemDto>, IValidatableObject
    {
        /// <summary>
        /// Defines LinkedDataItemEntityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LinkedDataItemEntityTypeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Organisation for value: Organisation
            /// </summary>
            [EnumMember(Value = "Organisation")]
            Organisation = 2,
            
            /// <summary>
            /// Enum Person for value: Person
            /// </summary>
            [EnumMember(Value = "Person")]
            Person = 3,
            
            /// <summary>
            /// Enum Activity for value: Activity
            /// </summary>
            [EnumMember(Value = "Activity")]
            Activity = 4,
            
            /// <summary>
            /// Enum Meeting for value: Meeting
            /// </summary>
            [EnumMember(Value = "Meeting")]
            Meeting = 5,
            
            /// <summary>
            /// Enum Opportunity for value: Opportunity
            /// </summary>
            [EnumMember(Value = "Opportunity")]
            Opportunity = 6,
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 7,
            
            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 8,
            
            /// <summary>
            /// Enum SupportCase for value: SupportCase
            /// </summary>
            [EnumMember(Value = "SupportCase")]
            SupportCase = 9,
            
            /// <summary>
            /// Enum SupportFaq for value: SupportFaq
            /// </summary>
            [EnumMember(Value = "SupportFaq")]
            SupportFaq = 10
        }

        /// <summary>
        /// Gets or Sets LinkedDataItemEntityType
        /// </summary>
        [DataMember(Name="LinkedDataItemEntityType", EmitDefaultValue=false)]
        public LinkedDataItemEntityTypeEnum? LinkedDataItemEntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedDataItemDto" /> class.
        /// </summary>
        [JsonConstructor]
        protected LinkedDataItemDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedDataItemDto" /> class.
        /// </summary>
        /// <param name="LinkedDataItemData1">LinkedDataItemData1.</param>
        /// <param name="LinkedDataItemData2">LinkedDataItemData2.</param>
        /// <param name="LinkedDataItemData3">LinkedDataItemData3.</param>
        /// <param name="LinkedDataItemData4">LinkedDataItemData4.</param>
        /// <param name="LinkedDataItemData5">LinkedDataItemData5.</param>
        /// <param name="LinkedDataItemData6">LinkedDataItemData6.</param>
        /// <param name="LinkedDataItemData7">LinkedDataItemData7.</param>
        /// <param name="LinkedDataItemData8">LinkedDataItemData8.</param>
        /// <param name="LinkedDataItemData9">LinkedDataItemData9.</param>
        /// <param name="LinkedDataItemDataMemo">LinkedDataItemDataMemo.</param>
        /// <param name="LinkedDataItemEntityType">LinkedDataItemEntityType.</param>
        /// <param name="LinkedDataItemId">LinkedDataItemId (required).</param>
        /// <param name="LinkedDataItemItemGroup">LinkedDataItemItemGroup.</param>
        /// <param name="LinkedDataItemPrice">LinkedDataItemPrice.</param>
        public LinkedDataItemDto(string LinkedDataItemData1 = default(string), string LinkedDataItemData2 = default(string), string LinkedDataItemData3 = default(string), string LinkedDataItemData4 = default(string), string LinkedDataItemData5 = default(string), string LinkedDataItemData6 = default(string), string LinkedDataItemData7 = default(string), string LinkedDataItemData8 = default(string), string LinkedDataItemData9 = default(string), string LinkedDataItemDataMemo = default(string), LinkedDataItemEntityTypeEnum? LinkedDataItemEntityType = default(LinkedDataItemEntityTypeEnum?), int? LinkedDataItemId = default(int?), string LinkedDataItemItemGroup = default(string), double? LinkedDataItemPrice = default(double?))
        {
            // to ensure "LinkedDataItemId" is required (not null)
            if (LinkedDataItemId == null)
            {
                throw new InvalidDataException("LinkedDataItemId is a required property for LinkedDataItemDto and cannot be null");
            }
            else
            {
                this.LinkedDataItemId = LinkedDataItemId;
            }
            this.LinkedDataItemData1 = LinkedDataItemData1;
            this.LinkedDataItemData2 = LinkedDataItemData2;
            this.LinkedDataItemData3 = LinkedDataItemData3;
            this.LinkedDataItemData4 = LinkedDataItemData4;
            this.LinkedDataItemData5 = LinkedDataItemData5;
            this.LinkedDataItemData6 = LinkedDataItemData6;
            this.LinkedDataItemData7 = LinkedDataItemData7;
            this.LinkedDataItemData8 = LinkedDataItemData8;
            this.LinkedDataItemData9 = LinkedDataItemData9;
            this.LinkedDataItemDataMemo = LinkedDataItemDataMemo;
            this.LinkedDataItemEntityType = LinkedDataItemEntityType;
            this.LinkedDataItemItemGroup = LinkedDataItemItemGroup;
            this.LinkedDataItemPrice = LinkedDataItemPrice;
        }
        
        /// <summary>
        /// Gets or Sets LinkedDataItemData1
        /// </summary>
        [DataMember(Name="LinkedDataItemData1", EmitDefaultValue=false)]
        public string LinkedDataItemData1 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData2
        /// </summary>
        [DataMember(Name="LinkedDataItemData2", EmitDefaultValue=false)]
        public string LinkedDataItemData2 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData3
        /// </summary>
        [DataMember(Name="LinkedDataItemData3", EmitDefaultValue=false)]
        public string LinkedDataItemData3 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData4
        /// </summary>
        [DataMember(Name="LinkedDataItemData4", EmitDefaultValue=false)]
        public string LinkedDataItemData4 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData5
        /// </summary>
        [DataMember(Name="LinkedDataItemData5", EmitDefaultValue=false)]
        public string LinkedDataItemData5 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData6
        /// </summary>
        [DataMember(Name="LinkedDataItemData6", EmitDefaultValue=false)]
        public string LinkedDataItemData6 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData7
        /// </summary>
        [DataMember(Name="LinkedDataItemData7", EmitDefaultValue=false)]
        public string LinkedDataItemData7 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData8
        /// </summary>
        [DataMember(Name="LinkedDataItemData8", EmitDefaultValue=false)]
        public string LinkedDataItemData8 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemData9
        /// </summary>
        [DataMember(Name="LinkedDataItemData9", EmitDefaultValue=false)]
        public string LinkedDataItemData9 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemDataMemo
        /// </summary>
        [DataMember(Name="LinkedDataItemDataMemo", EmitDefaultValue=false)]
        public string LinkedDataItemDataMemo { get; set; }


        /// <summary>
        /// Gets or Sets LinkedDataItemId
        /// </summary>
        [DataMember(Name="LinkedDataItemId", EmitDefaultValue=false)]
        public int? LinkedDataItemId { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemItemGroup
        /// </summary>
        [DataMember(Name="LinkedDataItemItemGroup", EmitDefaultValue=false)]
        public string LinkedDataItemItemGroup { get; set; }

        /// <summary>
        /// Gets or Sets LinkedDataItemPrice
        /// </summary>
        [DataMember(Name="LinkedDataItemPrice", EmitDefaultValue=false)]
        public double? LinkedDataItemPrice { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkedDataItemDto);
        }

        /// <summary>
        /// Returns true if LinkedDataItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkedDataItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedDataItemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LinkedDataItemData1 == input.LinkedDataItemData1 ||
                    (this.LinkedDataItemData1 != null &&
                    this.LinkedDataItemData1.Equals(input.LinkedDataItemData1))
                ) && 
                (
                    this.LinkedDataItemData2 == input.LinkedDataItemData2 ||
                    (this.LinkedDataItemData2 != null &&
                    this.LinkedDataItemData2.Equals(input.LinkedDataItemData2))
                ) && 
                (
                    this.LinkedDataItemData3 == input.LinkedDataItemData3 ||
                    (this.LinkedDataItemData3 != null &&
                    this.LinkedDataItemData3.Equals(input.LinkedDataItemData3))
                ) && 
                (
                    this.LinkedDataItemData4 == input.LinkedDataItemData4 ||
                    (this.LinkedDataItemData4 != null &&
                    this.LinkedDataItemData4.Equals(input.LinkedDataItemData4))
                ) && 
                (
                    this.LinkedDataItemData5 == input.LinkedDataItemData5 ||
                    (this.LinkedDataItemData5 != null &&
                    this.LinkedDataItemData5.Equals(input.LinkedDataItemData5))
                ) && 
                (
                    this.LinkedDataItemData6 == input.LinkedDataItemData6 ||
                    (this.LinkedDataItemData6 != null &&
                    this.LinkedDataItemData6.Equals(input.LinkedDataItemData6))
                ) && 
                (
                    this.LinkedDataItemData7 == input.LinkedDataItemData7 ||
                    (this.LinkedDataItemData7 != null &&
                    this.LinkedDataItemData7.Equals(input.LinkedDataItemData7))
                ) && 
                (
                    this.LinkedDataItemData8 == input.LinkedDataItemData8 ||
                    (this.LinkedDataItemData8 != null &&
                    this.LinkedDataItemData8.Equals(input.LinkedDataItemData8))
                ) && 
                (
                    this.LinkedDataItemData9 == input.LinkedDataItemData9 ||
                    (this.LinkedDataItemData9 != null &&
                    this.LinkedDataItemData9.Equals(input.LinkedDataItemData9))
                ) && 
                (
                    this.LinkedDataItemDataMemo == input.LinkedDataItemDataMemo ||
                    (this.LinkedDataItemDataMemo != null &&
                    this.LinkedDataItemDataMemo.Equals(input.LinkedDataItemDataMemo))
                ) && 
                (
                    this.LinkedDataItemEntityType == input.LinkedDataItemEntityType ||
                    (this.LinkedDataItemEntityType != null &&
                    this.LinkedDataItemEntityType.Equals(input.LinkedDataItemEntityType))
                ) && 
                (
                    this.LinkedDataItemId == input.LinkedDataItemId ||
                    (this.LinkedDataItemId != null &&
                    this.LinkedDataItemId.Equals(input.LinkedDataItemId))
                ) && 
                (
                    this.LinkedDataItemItemGroup == input.LinkedDataItemItemGroup ||
                    (this.LinkedDataItemItemGroup != null &&
                    this.LinkedDataItemItemGroup.Equals(input.LinkedDataItemItemGroup))
                ) && 
                (
                    this.LinkedDataItemPrice == input.LinkedDataItemPrice ||
                    (this.LinkedDataItemPrice != null &&
                    this.LinkedDataItemPrice.Equals(input.LinkedDataItemPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinkedDataItemData1 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData1.GetHashCode();
                if (this.LinkedDataItemData2 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData2.GetHashCode();
                if (this.LinkedDataItemData3 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData3.GetHashCode();
                if (this.LinkedDataItemData4 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData4.GetHashCode();
                if (this.LinkedDataItemData5 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData5.GetHashCode();
                if (this.LinkedDataItemData6 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData6.GetHashCode();
                if (this.LinkedDataItemData7 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData7.GetHashCode();
                if (this.LinkedDataItemData8 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData8.GetHashCode();
                if (this.LinkedDataItemData9 != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemData9.GetHashCode();
                if (this.LinkedDataItemDataMemo != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemDataMemo.GetHashCode();
                if (this.LinkedDataItemEntityType != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemEntityType.GetHashCode();
                if (this.LinkedDataItemId != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemId.GetHashCode();
                if (this.LinkedDataItemItemGroup != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemItemGroup.GetHashCode();
                if (this.LinkedDataItemPrice != null)
                    hashCode = hashCode * 59 + this.LinkedDataItemPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
