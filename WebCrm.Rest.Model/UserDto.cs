/* 
 * webCRM REST API
 *
 * Version: 1.0.0.0.<br>Note that you can access live data through this web site, so be careful when updating or deleting things.
 *
 * OpenAPI spec version: v1
 * Contact: api@webcrm.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;

namespace WebCrm.Rest.Model
{
    /// <summary>
    /// UserDto
    /// </summary>
    [DataContract]
    public partial class UserDto : BaseObject, IEquatable<UserDto>, IValidatableObject
    {
        /// <summary>
        /// Defines UserAddressFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserAddressFormatEnum
        {
            
            /// <summary>
            /// Enum Scandinavian for value: Scandinavian
            /// </summary>
            [EnumMember(Value = "Scandinavian")]
            Scandinavian = 1,
            
            /// <summary>
            /// Enum UK for value: UK
            /// </summary>
            [EnumMember(Value = "UK")]
            UK = 2,
            
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 3
        }

        /// <summary>
        /// Gets or Sets UserAddressFormat
        /// </summary>
        [DataMember(Name="UserAddressFormat", EmitDefaultValue=false)]
        public UserAddressFormatEnum? UserAddressFormat { get; set; }
        /// <summary>
        /// Defines UserBccMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserBccModeEnum
        {
            
            /// <summary>
            /// Enum NoTag for value: NoTag
            /// </summary>
            [EnumMember(Value = "NoTag")]
            NoTag = 1,
            
            /// <summary>
            /// Enum TagBeginning for value: TagBeginning
            /// </summary>
            [EnumMember(Value = "TagBeginning")]
            TagBeginning = 2,
            
            /// <summary>
            /// Enum TagEnd for value: TagEnd
            /// </summary>
            [EnumMember(Value = "TagEnd")]
            TagEnd = 3
        }

        /// <summary>
        /// Gets or Sets UserBccMode
        /// </summary>
        [DataMember(Name="UserBccMode", EmitDefaultValue=false)]
        public UserBccModeEnum? UserBccMode { get; set; }
        /// <summary>
        /// Defines UserCalendarColorScheme
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserCalendarColorSchemeEnum
        {
            
            /// <summary>
            /// Enum Dashboard for value: Dashboard
            /// </summary>
            [EnumMember(Value = "Dashboard")]
            Dashboard = 1,
            
            /// <summary>
            /// Enum Scheme0 for value: Scheme0
            /// </summary>
            [EnumMember(Value = "Scheme0")]
            Scheme0 = 2,
            
            /// <summary>
            /// Enum Scheme1 for value: Scheme1
            /// </summary>
            [EnumMember(Value = "Scheme1")]
            Scheme1 = 3,
            
            /// <summary>
            /// Enum Scheme2 for value: Scheme2
            /// </summary>
            [EnumMember(Value = "Scheme2")]
            Scheme2 = 4,
            
            /// <summary>
            /// Enum Scheme3 for value: Scheme3
            /// </summary>
            [EnumMember(Value = "Scheme3")]
            Scheme3 = 5,
            
            /// <summary>
            /// Enum Scheme4 for value: Scheme4
            /// </summary>
            [EnumMember(Value = "Scheme4")]
            Scheme4 = 6,
            
            /// <summary>
            /// Enum Scheme5 for value: Scheme5
            /// </summary>
            [EnumMember(Value = "Scheme5")]
            Scheme5 = 7,
            
            /// <summary>
            /// Enum Scheme6 for value: Scheme6
            /// </summary>
            [EnumMember(Value = "Scheme6")]
            Scheme6 = 8,
            
            /// <summary>
            /// Enum Scheme7 for value: Scheme7
            /// </summary>
            [EnumMember(Value = "Scheme7")]
            Scheme7 = 9,
            
            /// <summary>
            /// Enum Scheme8 for value: Scheme8
            /// </summary>
            [EnumMember(Value = "Scheme8")]
            Scheme8 = 10,
            
            /// <summary>
            /// Enum Scheme9 for value: Scheme9
            /// </summary>
            [EnumMember(Value = "Scheme9")]
            Scheme9 = 11
        }

        /// <summary>
        /// Gets or Sets UserCalendarColorScheme
        /// </summary>
        [DataMember(Name="UserCalendarColorScheme", EmitDefaultValue=false)]
        public UserCalendarColorSchemeEnum? UserCalendarColorScheme { get; set; }
        /// <summary>
        /// Defines UserDateFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserDateFormatEnum
        {
            
            /// <summary>
            /// Enum DDhMMhYYYY for value: DDhMMhYYYY
            /// </summary>
            [EnumMember(Value = "DDhMMhYYYY")]
            DDhMMhYYYY = 1,
            
            /// <summary>
            /// Enum YYYYhMMhDD for value: YYYYhMMhDD
            /// </summary>
            [EnumMember(Value = "YYYYhMMhDD")]
            YYYYhMMhDD = 2,
            
            /// <summary>
            /// Enum MMsDDsYYYY for value: MMsDDsYYYY
            /// </summary>
            [EnumMember(Value = "MMsDDsYYYY")]
            MMsDDsYYYY = 3,
            
            /// <summary>
            /// Enum DDpMMpYYYY for value: DDpMMpYYYY
            /// </summary>
            [EnumMember(Value = "DDpMMpYYYY")]
            DDpMMpYYYY = 4,
            
            /// <summary>
            /// Enum YYYYpMMpDD for value: YYYYpMMpDD
            /// </summary>
            [EnumMember(Value = "YYYYpMMpDD")]
            YYYYpMMpDD = 5
        }

        /// <summary>
        /// Gets or Sets UserDateFormat
        /// </summary>
        [DataMember(Name="UserDateFormat", EmitDefaultValue=false)]
        public UserDateFormatEnum? UserDateFormat { get; set; }
        /// <summary>
        /// Defines UserSupportCaseNotificationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserSupportCaseNotificationTypeEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum Never for value: Never
            /// </summary>
            [EnumMember(Value = "Never")]
            Never = 2,
            
            /// <summary>
            /// Enum StatusEmail for value: StatusEmail
            /// </summary>
            [EnumMember(Value = "StatusEmail")]
            StatusEmail = 3,
            
            /// <summary>
            /// Enum StatusEmailAndMessage for value: StatusEmailAndMessage
            /// </summary>
            [EnumMember(Value = "StatusEmailAndMessage")]
            StatusEmailAndMessage = 4
        }

        /// <summary>
        /// Gets or Sets UserSupportCaseNotificationType
        /// </summary>
        [DataMember(Name="UserSupportCaseNotificationType", EmitDefaultValue=false)]
        public UserSupportCaseNotificationTypeEnum? UserSupportCaseNotificationType { get; set; }
        /// <summary>
        /// Defines UserSupportCaseStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserSupportCaseStatusEnum
        {
            
            /// <summary>
            /// Enum Available for value: Available
            /// </summary>
            [EnumMember(Value = "Available")]
            Available = 1,
            
            /// <summary>
            /// Enum Busy for value: Busy
            /// </summary>
            [EnumMember(Value = "Busy")]
            Busy = 2,
            
            /// <summary>
            /// Enum OffLine for value: OffLine
            /// </summary>
            [EnumMember(Value = "OffLine")]
            OffLine = 3,
            
            /// <summary>
            /// Enum Absent for value: Absent
            /// </summary>
            [EnumMember(Value = "Absent")]
            Absent = 4
        }

        /// <summary>
        /// Gets or Sets UserSupportCaseStatus
        /// </summary>
        [DataMember(Name="UserSupportCaseStatus", EmitDefaultValue=false)]
        public UserSupportCaseStatusEnum? UserSupportCaseStatus { get; set; }
        /// <summary>
        /// Defines UserSynchronizationMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserSynchronizationModeEnum
        {
            
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 1,
            
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 2
        }

        /// <summary>
        /// Gets or Sets UserSynchronizationMode
        /// </summary>
        [DataMember(Name="UserSynchronizationMode", EmitDefaultValue=false)]
        public UserSynchronizationModeEnum? UserSynchronizationMode { get; set; }
        /// <summary>
        /// Defines UserTimeFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserTimeFormatEnum
        {
            
            /// <summary>
            /// Enum Hours24 for value: Hours24
            /// </summary>
            [EnumMember(Value = "Hours24")]
            Hours24 = 1,
            
            /// <summary>
            /// Enum Hours12 for value: Hours12
            /// </summary>
            [EnumMember(Value = "Hours12")]
            Hours12 = 2
        }

        /// <summary>
        /// Gets or Sets UserTimeFormat
        /// </summary>
        [DataMember(Name="UserTimeFormat", EmitDefaultValue=false)]
        public UserTimeFormatEnum? UserTimeFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDto" /> class.
        /// </summary>
        [JsonConstructor]
        protected UserDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDto" /> class.
        /// </summary>
        /// <param name="UserAccessId">UserAccessId.</param>
        /// <param name="UserAccessLevel">UserAccessLevel.</param>
        /// <param name="UserAddressFormat">UserAddressFormat.</param>
        /// <param name="UserAdvancedGroups">UserAdvancedGroups.</param>
        /// <param name="UserAuthenticationCode">UserAuthenticationCode.</param>
        /// <param name="UserBccEmail">UserBccEmail.</param>
        /// <param name="UserBccMode">UserBccMode.</param>
        /// <param name="UserBccTag">UserBccTag.</param>
        /// <param name="UserBudgetNote">UserBudgetNote.</param>
        /// <param name="UserCalendarColorScheme">UserCalendarColorScheme.</param>
        /// <param name="UserCreatedAt">UserCreatedAt.</param>
        /// <param name="UserCreatedBy">UserCreatedBy.</param>
        /// <param name="UserCurrencyName">UserCurrencyName.</param>
        /// <param name="UserDateFormat">UserDateFormat.</param>
        /// <param name="UserDecimalPoint">UserDecimalPoint.</param>
        /// <param name="UserDefaultSupportCaseChannel">UserDefaultSupportCaseChannel.</param>
        /// <param name="UserDefaultMemberGroupId">UserDefaultMemberGroupId.</param>
        /// <param name="UserDefaultOpportunity2ndResponsible">UserDefaultOpportunity2ndResponsible.</param>
        /// <param name="UserDefaultOrganisation2ndResponsible">UserDefaultOrganisation2ndResponsible.</param>
        /// <param name="UserEmail">UserEmail.</param>
        /// <param name="UserGmtDifference">UserGmtDifference.</param>
        /// <param name="UserGroupId">UserGroupId.</param>
        /// <param name="UserId">UserId (required).</param>
        /// <param name="UserInitials">UserInitials.</param>
        /// <param name="UserIntegrationId">UserIntegrationId.</param>
        /// <param name="UserIpRestrict">UserIpRestrict.</param>
        /// <param name="UserIsRestApiEnabled">UserIsRestApiEnabled.</param>
        /// <param name="UserIsSpellCheckerEnabled">UserIsSpellCheckerEnabled.</param>
        /// <param name="UserIsSupportCaseAvailableStatusEnabled">UserIsSupportCaseAvailableStatusEnabled.</param>
        /// <param name="UserLanguageId">UserLanguageId.</param>
        /// <param name="UserLastLoginDateTime">UserLastLoginDateTime.</param>
        /// <param name="UserLastTryDateTime">UserLastTryDateTime.</param>
        /// <param name="UserLoginCount">UserLoginCount.</param>
        /// <param name="UserLoginLog">UserLoginLog.</param>
        /// <param name="UserLoginName">UserLoginName.</param>
        /// <param name="UserMobilePhone">UserMobilePhone.</param>
        /// <param name="UserName">UserName.</param>
        /// <param name="UserPassword">UserPassword.</param>
        /// <param name="UserPasswordInUrl">UserPasswordInUrl.</param>
        /// <param name="UserPasswordUpdatedAt">UserPasswordUpdatedAt.</param>
        /// <param name="UserPhoneParameters">UserPhoneParameters.</param>
        /// <param name="UserSmsLogin">UserSmsLogin.</param>
        /// <param name="UserSoftCall">UserSoftCall.</param>
        /// <param name="UserSupportCaseExpirationDateTime">UserSupportCaseExpirationDateTime.</param>
        /// <param name="UserSupportCaseLatest">UserSupportCaseLatest.</param>
        /// <param name="UserSupportCaseNotificationType">UserSupportCaseNotificationType.</param>
        /// <param name="UserSupportCaseStatus">UserSupportCaseStatus.</param>
        /// <param name="UserSynchronizationMode">UserSynchronizationMode.</param>
        /// <param name="UserTelephone">UserTelephone.</param>
        /// <param name="UserTerritories">UserTerritories.</param>
        /// <param name="UserTicket">UserTicket.</param>
        /// <param name="UserTicketExpirationDateTime">UserTicketExpirationDateTime.</param>
        /// <param name="UserTimeFormat">UserTimeFormat.</param>
        /// <param name="UserTitle">UserTitle.</param>
        /// <param name="UserUpdatedAt">UserUpdatedAt.</param>
        /// <param name="UserUpdatedBy">UserUpdatedBy.</param>
        /// <param name="UserWrongPasswordCount">UserWrongPasswordCount.</param>
        /// <param name="UserCustom1">UserCustom1.</param>
        /// <param name="UserCustom2">UserCustom2.</param>
        /// <param name="UserCustom3">UserCustom3.</param>
        /// <param name="UserCustom4">UserCustom4.</param>
        /// <param name="UserCustom5">UserCustom5.</param>
        /// <param name="UserCustom6">UserCustom6.</param>
        /// <param name="UserCustom7">UserCustom7.</param>
        /// <param name="UserCustom8">UserCustom8.</param>
        /// <param name="UserCustom9">UserCustom9.</param>
        /// <param name="UserCustom10">UserCustom10.</param>
        /// <param name="UserCustom11">UserCustom11.</param>
        /// <param name="UserCustom12">UserCustom12.</param>
        /// <param name="UserCustom13">UserCustom13.</param>
        /// <param name="UserCustom14">UserCustom14.</param>
        /// <param name="UserCustom15">UserCustom15.</param>
        /// <param name="UserMemo">UserMemo.</param>
        public UserDto(int? UserAccessId = default(int?), int? UserAccessLevel = default(int?), UserAddressFormatEnum? UserAddressFormat = default(UserAddressFormatEnum?), string UserAdvancedGroups = default(string), string UserAuthenticationCode = default(string), string UserBccEmail = default(string), UserBccModeEnum? UserBccMode = default(UserBccModeEnum?), string UserBccTag = default(string), string UserBudgetNote = default(string), UserCalendarColorSchemeEnum? UserCalendarColorScheme = default(UserCalendarColorSchemeEnum?), DateTime? UserCreatedAt = default(DateTime?), string UserCreatedBy = default(string), string UserCurrencyName = default(string), UserDateFormatEnum? UserDateFormat = default(UserDateFormatEnum?), string UserDecimalPoint = default(string), int? UserDefaultSupportCaseChannel = default(int?), int? UserDefaultMemberGroupId = default(int?), int? UserDefaultOpportunity2ndResponsible = default(int?), int? UserDefaultOrganisation2ndResponsible = default(int?), string UserEmail = default(string), int? UserGmtDifference = default(int?), int? UserGroupId = default(int?), int? UserId = default(int?), string UserInitials = default(string), string UserIntegrationId = default(string), string UserIpRestrict = default(string), bool? UserIsRestApiEnabled = default(bool?), bool? UserIsSpellCheckerEnabled = default(bool?), bool? UserIsSupportCaseAvailableStatusEnabled = default(bool?), int? UserLanguageId = default(int?), DateTime? UserLastLoginDateTime = default(DateTime?), DateTime? UserLastTryDateTime = default(DateTime?), int? UserLoginCount = default(int?), string UserLoginLog = default(string), string UserLoginName = default(string), string UserMobilePhone = default(string), string UserName = default(string), string UserPassword = default(string), bool? UserPasswordInUrl = default(bool?), DateTime? UserPasswordUpdatedAt = default(DateTime?), string UserPhoneParameters = default(string), int? UserSmsLogin = default(int?), string UserSoftCall = default(string), DateTime? UserSupportCaseExpirationDateTime = default(DateTime?), DateTime? UserSupportCaseLatest = default(DateTime?), UserSupportCaseNotificationTypeEnum? UserSupportCaseNotificationType = default(UserSupportCaseNotificationTypeEnum?), UserSupportCaseStatusEnum? UserSupportCaseStatus = default(UserSupportCaseStatusEnum?), UserSynchronizationModeEnum? UserSynchronizationMode = default(UserSynchronizationModeEnum?), string UserTelephone = default(string), string UserTerritories = default(string), string UserTicket = default(string), DateTime? UserTicketExpirationDateTime = default(DateTime?), UserTimeFormatEnum? UserTimeFormat = default(UserTimeFormatEnum?), string UserTitle = default(string), DateTime? UserUpdatedAt = default(DateTime?), string UserUpdatedBy = default(string), int? UserWrongPasswordCount = default(int?), string UserCustom1 = default(string), string UserCustom2 = default(string), string UserCustom3 = default(string), string UserCustom4 = default(string), string UserCustom5 = default(string), string UserCustom6 = default(string), string UserCustom7 = default(string), string UserCustom8 = default(string), string UserCustom9 = default(string), string UserCustom10 = default(string), string UserCustom11 = default(string), string UserCustom12 = default(string), string UserCustom13 = default(string), string UserCustom14 = default(string), string UserCustom15 = default(string), string UserMemo = default(string))
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for UserDto and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            this.UserAccessId = UserAccessId;
            this.UserAccessLevel = UserAccessLevel;
            this.UserAddressFormat = UserAddressFormat;
            this.UserAdvancedGroups = UserAdvancedGroups;
            this.UserAuthenticationCode = UserAuthenticationCode;
            this.UserBccEmail = UserBccEmail;
            this.UserBccMode = UserBccMode;
            this.UserBccTag = UserBccTag;
            this.UserBudgetNote = UserBudgetNote;
            this.UserCalendarColorScheme = UserCalendarColorScheme;
            this.UserCreatedAt = UserCreatedAt;
            this.UserCreatedBy = UserCreatedBy;
            this.UserCurrencyName = UserCurrencyName;
            this.UserDateFormat = UserDateFormat;
            this.UserDecimalPoint = UserDecimalPoint;
            this.UserDefaultSupportCaseChannel = UserDefaultSupportCaseChannel;
            this.UserDefaultMemberGroupId = UserDefaultMemberGroupId;
            this.UserDefaultOpportunity2ndResponsible = UserDefaultOpportunity2ndResponsible;
            this.UserDefaultOrganisation2ndResponsible = UserDefaultOrganisation2ndResponsible;
            this.UserEmail = UserEmail;
            this.UserGmtDifference = UserGmtDifference;
            this.UserGroupId = UserGroupId;
            this.UserInitials = UserInitials;
            this.UserIntegrationId = UserIntegrationId;
            this.UserIpRestrict = UserIpRestrict;
            this.UserIsRestApiEnabled = UserIsRestApiEnabled;
            this.UserIsSpellCheckerEnabled = UserIsSpellCheckerEnabled;
            this.UserIsSupportCaseAvailableStatusEnabled = UserIsSupportCaseAvailableStatusEnabled;
            this.UserLanguageId = UserLanguageId;
            this.UserLastLoginDateTime = UserLastLoginDateTime;
            this.UserLastTryDateTime = UserLastTryDateTime;
            this.UserLoginCount = UserLoginCount;
            this.UserLoginLog = UserLoginLog;
            this.UserLoginName = UserLoginName;
            this.UserMobilePhone = UserMobilePhone;
            this.UserName = UserName;
            this.UserPassword = UserPassword;
            this.UserPasswordInUrl = UserPasswordInUrl;
            this.UserPasswordUpdatedAt = UserPasswordUpdatedAt;
            this.UserPhoneParameters = UserPhoneParameters;
            this.UserSmsLogin = UserSmsLogin;
            this.UserSoftCall = UserSoftCall;
            this.UserSupportCaseExpirationDateTime = UserSupportCaseExpirationDateTime;
            this.UserSupportCaseLatest = UserSupportCaseLatest;
            this.UserSupportCaseNotificationType = UserSupportCaseNotificationType;
            this.UserSupportCaseStatus = UserSupportCaseStatus;
            this.UserSynchronizationMode = UserSynchronizationMode;
            this.UserTelephone = UserTelephone;
            this.UserTerritories = UserTerritories;
            this.UserTicket = UserTicket;
            this.UserTicketExpirationDateTime = UserTicketExpirationDateTime;
            this.UserTimeFormat = UserTimeFormat;
            this.UserTitle = UserTitle;
            this.UserUpdatedAt = UserUpdatedAt;
            this.UserUpdatedBy = UserUpdatedBy;
            this.UserWrongPasswordCount = UserWrongPasswordCount;
            this.UserCustom1 = UserCustom1;
            this.UserCustom2 = UserCustom2;
            this.UserCustom3 = UserCustom3;
            this.UserCustom4 = UserCustom4;
            this.UserCustom5 = UserCustom5;
            this.UserCustom6 = UserCustom6;
            this.UserCustom7 = UserCustom7;
            this.UserCustom8 = UserCustom8;
            this.UserCustom9 = UserCustom9;
            this.UserCustom10 = UserCustom10;
            this.UserCustom11 = UserCustom11;
            this.UserCustom12 = UserCustom12;
            this.UserCustom13 = UserCustom13;
            this.UserCustom14 = UserCustom14;
            this.UserCustom15 = UserCustom15;
            this.UserMemo = UserMemo;
        }
        
        /// <summary>
        /// Gets or Sets UserAccessId
        /// </summary>
        [DataMember(Name="UserAccessId", EmitDefaultValue=false)]
        public int? UserAccessId { get; set; }

        /// <summary>
        /// Gets or Sets UserAccessLevel
        /// </summary>
        [DataMember(Name="UserAccessLevel", EmitDefaultValue=false)]
        public int? UserAccessLevel { get; set; }


        /// <summary>
        /// Gets or Sets UserAdvancedGroups
        /// </summary>
        [DataMember(Name="UserAdvancedGroups", EmitDefaultValue=false)]
        public string UserAdvancedGroups { get; set; }

        /// <summary>
        /// Gets or Sets UserAuthenticationCode
        /// </summary>
        [DataMember(Name="UserAuthenticationCode", EmitDefaultValue=false)]
        public string UserAuthenticationCode { get; set; }

        /// <summary>
        /// Gets or Sets UserBccEmail
        /// </summary>
        [DataMember(Name="UserBccEmail", EmitDefaultValue=false)]
        public string UserBccEmail { get; set; }


        /// <summary>
        /// Gets or Sets UserBccTag
        /// </summary>
        [DataMember(Name="UserBccTag", EmitDefaultValue=false)]
        public string UserBccTag { get; set; }

        /// <summary>
        /// Gets or Sets UserBudgetNote
        /// </summary>
        [DataMember(Name="UserBudgetNote", EmitDefaultValue=false)]
        public string UserBudgetNote { get; set; }


        /// <summary>
        /// Gets or Sets UserCreatedAt
        /// </summary>
        [DataMember(Name="UserCreatedAt", EmitDefaultValue=false)]
        public DateTime? UserCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserCreatedBy
        /// </summary>
        [DataMember(Name="UserCreatedBy", EmitDefaultValue=false)]
        public string UserCreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UserCurrencyName
        /// </summary>
        [DataMember(Name="UserCurrencyName", EmitDefaultValue=false)]
        public string UserCurrencyName { get; set; }


        /// <summary>
        /// Gets or Sets UserDecimalPoint
        /// </summary>
        [DataMember(Name="UserDecimalPoint", EmitDefaultValue=false)]
        public string UserDecimalPoint { get; set; }

        /// <summary>
        /// Gets or Sets UserDefaultSupportCaseChannel
        /// </summary>
        [DataMember(Name="UserDefaultSupportCaseChannel", EmitDefaultValue=false)]
        public int? UserDefaultSupportCaseChannel { get; set; }

        /// <summary>
        /// Gets or Sets UserDefaultMemberGroupId
        /// </summary>
        [DataMember(Name="UserDefaultMemberGroupId", EmitDefaultValue=false)]
        public int? UserDefaultMemberGroupId { get; set; }

        /// <summary>
        /// Gets or Sets UserDefaultOpportunity2ndResponsible
        /// </summary>
        [DataMember(Name="UserDefaultOpportunity2ndResponsible", EmitDefaultValue=false)]
        public int? UserDefaultOpportunity2ndResponsible { get; set; }

        /// <summary>
        /// Gets or Sets UserDefaultOrganisation2ndResponsible
        /// </summary>
        [DataMember(Name="UserDefaultOrganisation2ndResponsible", EmitDefaultValue=false)]
        public int? UserDefaultOrganisation2ndResponsible { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name="UserEmail", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or Sets UserGmtDifference
        /// </summary>
        [DataMember(Name="UserGmtDifference", EmitDefaultValue=false)]
        public int? UserGmtDifference { get; set; }

        /// <summary>
        /// Gets or Sets UserGroupId
        /// </summary>
        [DataMember(Name="UserGroupId", EmitDefaultValue=false)]
        public int? UserGroupId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserInitials
        /// </summary>
        [DataMember(Name="UserInitials", EmitDefaultValue=false)]
        public string UserInitials { get; set; }

        /// <summary>
        /// Gets or Sets UserIntegrationId
        /// </summary>
        [DataMember(Name="UserIntegrationId", EmitDefaultValue=false)]
        public string UserIntegrationId { get; set; }

        /// <summary>
        /// Gets or Sets UserIpRestrict
        /// </summary>
        [DataMember(Name="UserIpRestrict", EmitDefaultValue=false)]
        public string UserIpRestrict { get; set; }

        /// <summary>
        /// Gets or Sets UserIsRestApiEnabled
        /// </summary>
        [DataMember(Name="UserIsRestApiEnabled", EmitDefaultValue=false)]
        public bool? UserIsRestApiEnabled { get; set; }

        /// <summary>
        /// Gets or Sets UserIsSpellCheckerEnabled
        /// </summary>
        [DataMember(Name="UserIsSpellCheckerEnabled", EmitDefaultValue=false)]
        public bool? UserIsSpellCheckerEnabled { get; set; }

        /// <summary>
        /// Gets or Sets UserIsSupportCaseAvailableStatusEnabled
        /// </summary>
        [DataMember(Name="UserIsSupportCaseAvailableStatusEnabled", EmitDefaultValue=false)]
        public bool? UserIsSupportCaseAvailableStatusEnabled { get; set; }

        /// <summary>
        /// Gets or Sets UserLanguageId
        /// </summary>
        [DataMember(Name="UserLanguageId", EmitDefaultValue=false)]
        public int? UserLanguageId { get; set; }

        /// <summary>
        /// Gets or Sets UserLastLoginDateTime
        /// </summary>
        [DataMember(Name="UserLastLoginDateTime", EmitDefaultValue=false)]
        public DateTime? UserLastLoginDateTime { get; set; }

        /// <summary>
        /// Gets or Sets UserLastTryDateTime
        /// </summary>
        [DataMember(Name="UserLastTryDateTime", EmitDefaultValue=false)]
        public DateTime? UserLastTryDateTime { get; set; }

        /// <summary>
        /// Gets or Sets UserLoginCount
        /// </summary>
        [DataMember(Name="UserLoginCount", EmitDefaultValue=false)]
        public int? UserLoginCount { get; set; }

        /// <summary>
        /// Gets or Sets UserLoginLog
        /// </summary>
        [DataMember(Name="UserLoginLog", EmitDefaultValue=false)]
        public string UserLoginLog { get; set; }

        /// <summary>
        /// Gets or Sets UserLoginName
        /// </summary>
        [DataMember(Name="UserLoginName", EmitDefaultValue=false)]
        public string UserLoginName { get; set; }

        /// <summary>
        /// Gets or Sets UserMobilePhone
        /// </summary>
        [DataMember(Name="UserMobilePhone", EmitDefaultValue=false)]
        public string UserMobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets UserPassword
        /// </summary>
        [DataMember(Name="UserPassword", EmitDefaultValue=false)]
        public string UserPassword { get; set; }

        /// <summary>
        /// Gets or Sets UserPasswordInUrl
        /// </summary>
        [DataMember(Name="UserPasswordInUrl", EmitDefaultValue=false)]
        public bool? UserPasswordInUrl { get; set; }

        /// <summary>
        /// Gets or Sets UserPasswordUpdatedAt
        /// </summary>
        [DataMember(Name="UserPasswordUpdatedAt", EmitDefaultValue=false)]
        public DateTime? UserPasswordUpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserPhoneParameters
        /// </summary>
        [DataMember(Name="UserPhoneParameters", EmitDefaultValue=false)]
        public string UserPhoneParameters { get; set; }

        /// <summary>
        /// Gets or Sets UserSmsLogin
        /// </summary>
        [DataMember(Name="UserSmsLogin", EmitDefaultValue=false)]
        public int? UserSmsLogin { get; set; }

        /// <summary>
        /// Gets or Sets UserSoftCall
        /// </summary>
        [DataMember(Name="UserSoftCall", EmitDefaultValue=false)]
        public string UserSoftCall { get; set; }

        /// <summary>
        /// Gets or Sets UserSupportCaseExpirationDateTime
        /// </summary>
        [DataMember(Name="UserSupportCaseExpirationDateTime", EmitDefaultValue=false)]
        public DateTime? UserSupportCaseExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets UserSupportCaseLatest
        /// </summary>
        [DataMember(Name="UserSupportCaseLatest", EmitDefaultValue=false)]
        public DateTime? UserSupportCaseLatest { get; set; }




        /// <summary>
        /// Gets or Sets UserTelephone
        /// </summary>
        [DataMember(Name="UserTelephone", EmitDefaultValue=false)]
        public string UserTelephone { get; set; }

        /// <summary>
        /// Gets or Sets UserTerritories
        /// </summary>
        [DataMember(Name="UserTerritories", EmitDefaultValue=false)]
        public string UserTerritories { get; set; }

        /// <summary>
        /// Gets or Sets UserTicket
        /// </summary>
        [DataMember(Name="UserTicket", EmitDefaultValue=false)]
        public string UserTicket { get; set; }

        /// <summary>
        /// Gets or Sets UserTicketExpirationDateTime
        /// </summary>
        [DataMember(Name="UserTicketExpirationDateTime", EmitDefaultValue=false)]
        public DateTime? UserTicketExpirationDateTime { get; set; }


        /// <summary>
        /// Gets or Sets UserTitle
        /// </summary>
        [DataMember(Name="UserTitle", EmitDefaultValue=false)]
        public string UserTitle { get; set; }

        /// <summary>
        /// Gets or Sets UserUpdatedAt
        /// </summary>
        [DataMember(Name="UserUpdatedAt", EmitDefaultValue=false)]
        public DateTime? UserUpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserUpdatedBy
        /// </summary>
        [DataMember(Name="UserUpdatedBy", EmitDefaultValue=false)]
        public string UserUpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UserWrongPasswordCount
        /// </summary>
        [DataMember(Name="UserWrongPasswordCount", EmitDefaultValue=false)]
        public int? UserWrongPasswordCount { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom1
        /// </summary>
        [DataMember(Name="UserCustom1", EmitDefaultValue=false)]
        public string UserCustom1 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom2
        /// </summary>
        [DataMember(Name="UserCustom2", EmitDefaultValue=false)]
        public string UserCustom2 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom3
        /// </summary>
        [DataMember(Name="UserCustom3", EmitDefaultValue=false)]
        public string UserCustom3 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom4
        /// </summary>
        [DataMember(Name="UserCustom4", EmitDefaultValue=false)]
        public string UserCustom4 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom5
        /// </summary>
        [DataMember(Name="UserCustom5", EmitDefaultValue=false)]
        public string UserCustom5 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom6
        /// </summary>
        [DataMember(Name="UserCustom6", EmitDefaultValue=false)]
        public string UserCustom6 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom7
        /// </summary>
        [DataMember(Name="UserCustom7", EmitDefaultValue=false)]
        public string UserCustom7 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom8
        /// </summary>
        [DataMember(Name="UserCustom8", EmitDefaultValue=false)]
        public string UserCustom8 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom9
        /// </summary>
        [DataMember(Name="UserCustom9", EmitDefaultValue=false)]
        public string UserCustom9 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom10
        /// </summary>
        [DataMember(Name="UserCustom10", EmitDefaultValue=false)]
        public string UserCustom10 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom11
        /// </summary>
        [DataMember(Name="UserCustom11", EmitDefaultValue=false)]
        public string UserCustom11 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom12
        /// </summary>
        [DataMember(Name="UserCustom12", EmitDefaultValue=false)]
        public string UserCustom12 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom13
        /// </summary>
        [DataMember(Name="UserCustom13", EmitDefaultValue=false)]
        public string UserCustom13 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom14
        /// </summary>
        [DataMember(Name="UserCustom14", EmitDefaultValue=false)]
        public string UserCustom14 { get; set; }

        /// <summary>
        /// Gets or Sets UserCustom15
        /// </summary>
        [DataMember(Name="UserCustom15", EmitDefaultValue=false)]
        public string UserCustom15 { get; set; }

        /// <summary>
        /// Gets or Sets UserMemo
        /// </summary>
        [DataMember(Name="UserMemo", EmitDefaultValue=false)]
        public string UserMemo { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDto);
        }

        /// <summary>
        /// Returns true if UserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserAccessId == input.UserAccessId ||
                    (this.UserAccessId != null &&
                    this.UserAccessId.Equals(input.UserAccessId))
                ) && 
                (
                    this.UserAccessLevel == input.UserAccessLevel ||
                    (this.UserAccessLevel != null &&
                    this.UserAccessLevel.Equals(input.UserAccessLevel))
                ) && 
                (
                    this.UserAddressFormat == input.UserAddressFormat ||
                    (this.UserAddressFormat != null &&
                    this.UserAddressFormat.Equals(input.UserAddressFormat))
                ) && 
                (
                    this.UserAdvancedGroups == input.UserAdvancedGroups ||
                    (this.UserAdvancedGroups != null &&
                    this.UserAdvancedGroups.Equals(input.UserAdvancedGroups))
                ) && 
                (
                    this.UserAuthenticationCode == input.UserAuthenticationCode ||
                    (this.UserAuthenticationCode != null &&
                    this.UserAuthenticationCode.Equals(input.UserAuthenticationCode))
                ) && 
                (
                    this.UserBccEmail == input.UserBccEmail ||
                    (this.UserBccEmail != null &&
                    this.UserBccEmail.Equals(input.UserBccEmail))
                ) && 
                (
                    this.UserBccMode == input.UserBccMode ||
                    (this.UserBccMode != null &&
                    this.UserBccMode.Equals(input.UserBccMode))
                ) && 
                (
                    this.UserBccTag == input.UserBccTag ||
                    (this.UserBccTag != null &&
                    this.UserBccTag.Equals(input.UserBccTag))
                ) && 
                (
                    this.UserBudgetNote == input.UserBudgetNote ||
                    (this.UserBudgetNote != null &&
                    this.UserBudgetNote.Equals(input.UserBudgetNote))
                ) && 
                (
                    this.UserCalendarColorScheme == input.UserCalendarColorScheme ||
                    (this.UserCalendarColorScheme != null &&
                    this.UserCalendarColorScheme.Equals(input.UserCalendarColorScheme))
                ) && 
                (
                    this.UserCreatedAt == input.UserCreatedAt ||
                    (this.UserCreatedAt != null &&
                    this.UserCreatedAt.Equals(input.UserCreatedAt))
                ) && 
                (
                    this.UserCreatedBy == input.UserCreatedBy ||
                    (this.UserCreatedBy != null &&
                    this.UserCreatedBy.Equals(input.UserCreatedBy))
                ) && 
                (
                    this.UserCurrencyName == input.UserCurrencyName ||
                    (this.UserCurrencyName != null &&
                    this.UserCurrencyName.Equals(input.UserCurrencyName))
                ) && 
                (
                    this.UserDateFormat == input.UserDateFormat ||
                    (this.UserDateFormat != null &&
                    this.UserDateFormat.Equals(input.UserDateFormat))
                ) && 
                (
                    this.UserDecimalPoint == input.UserDecimalPoint ||
                    (this.UserDecimalPoint != null &&
                    this.UserDecimalPoint.Equals(input.UserDecimalPoint))
                ) && 
                (
                    this.UserDefaultSupportCaseChannel == input.UserDefaultSupportCaseChannel ||
                    (this.UserDefaultSupportCaseChannel != null &&
                    this.UserDefaultSupportCaseChannel.Equals(input.UserDefaultSupportCaseChannel))
                ) && 
                (
                    this.UserDefaultMemberGroupId == input.UserDefaultMemberGroupId ||
                    (this.UserDefaultMemberGroupId != null &&
                    this.UserDefaultMemberGroupId.Equals(input.UserDefaultMemberGroupId))
                ) && 
                (
                    this.UserDefaultOpportunity2ndResponsible == input.UserDefaultOpportunity2ndResponsible ||
                    (this.UserDefaultOpportunity2ndResponsible != null &&
                    this.UserDefaultOpportunity2ndResponsible.Equals(input.UserDefaultOpportunity2ndResponsible))
                ) && 
                (
                    this.UserDefaultOrganisation2ndResponsible == input.UserDefaultOrganisation2ndResponsible ||
                    (this.UserDefaultOrganisation2ndResponsible != null &&
                    this.UserDefaultOrganisation2ndResponsible.Equals(input.UserDefaultOrganisation2ndResponsible))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.UserGmtDifference == input.UserGmtDifference ||
                    (this.UserGmtDifference != null &&
                    this.UserGmtDifference.Equals(input.UserGmtDifference))
                ) && 
                (
                    this.UserGroupId == input.UserGroupId ||
                    (this.UserGroupId != null &&
                    this.UserGroupId.Equals(input.UserGroupId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserInitials == input.UserInitials ||
                    (this.UserInitials != null &&
                    this.UserInitials.Equals(input.UserInitials))
                ) && 
                (
                    this.UserIntegrationId == input.UserIntegrationId ||
                    (this.UserIntegrationId != null &&
                    this.UserIntegrationId.Equals(input.UserIntegrationId))
                ) && 
                (
                    this.UserIpRestrict == input.UserIpRestrict ||
                    (this.UserIpRestrict != null &&
                    this.UserIpRestrict.Equals(input.UserIpRestrict))
                ) && 
                (
                    this.UserIsRestApiEnabled == input.UserIsRestApiEnabled ||
                    (this.UserIsRestApiEnabled != null &&
                    this.UserIsRestApiEnabled.Equals(input.UserIsRestApiEnabled))
                ) && 
                (
                    this.UserIsSpellCheckerEnabled == input.UserIsSpellCheckerEnabled ||
                    (this.UserIsSpellCheckerEnabled != null &&
                    this.UserIsSpellCheckerEnabled.Equals(input.UserIsSpellCheckerEnabled))
                ) && 
                (
                    this.UserIsSupportCaseAvailableStatusEnabled == input.UserIsSupportCaseAvailableStatusEnabled ||
                    (this.UserIsSupportCaseAvailableStatusEnabled != null &&
                    this.UserIsSupportCaseAvailableStatusEnabled.Equals(input.UserIsSupportCaseAvailableStatusEnabled))
                ) && 
                (
                    this.UserLanguageId == input.UserLanguageId ||
                    (this.UserLanguageId != null &&
                    this.UserLanguageId.Equals(input.UserLanguageId))
                ) && 
                (
                    this.UserLastLoginDateTime == input.UserLastLoginDateTime ||
                    (this.UserLastLoginDateTime != null &&
                    this.UserLastLoginDateTime.Equals(input.UserLastLoginDateTime))
                ) && 
                (
                    this.UserLastTryDateTime == input.UserLastTryDateTime ||
                    (this.UserLastTryDateTime != null &&
                    this.UserLastTryDateTime.Equals(input.UserLastTryDateTime))
                ) && 
                (
                    this.UserLoginCount == input.UserLoginCount ||
                    (this.UserLoginCount != null &&
                    this.UserLoginCount.Equals(input.UserLoginCount))
                ) && 
                (
                    this.UserLoginLog == input.UserLoginLog ||
                    (this.UserLoginLog != null &&
                    this.UserLoginLog.Equals(input.UserLoginLog))
                ) && 
                (
                    this.UserLoginName == input.UserLoginName ||
                    (this.UserLoginName != null &&
                    this.UserLoginName.Equals(input.UserLoginName))
                ) && 
                (
                    this.UserMobilePhone == input.UserMobilePhone ||
                    (this.UserMobilePhone != null &&
                    this.UserMobilePhone.Equals(input.UserMobilePhone))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserPassword == input.UserPassword ||
                    (this.UserPassword != null &&
                    this.UserPassword.Equals(input.UserPassword))
                ) && 
                (
                    this.UserPasswordInUrl == input.UserPasswordInUrl ||
                    (this.UserPasswordInUrl != null &&
                    this.UserPasswordInUrl.Equals(input.UserPasswordInUrl))
                ) && 
                (
                    this.UserPasswordUpdatedAt == input.UserPasswordUpdatedAt ||
                    (this.UserPasswordUpdatedAt != null &&
                    this.UserPasswordUpdatedAt.Equals(input.UserPasswordUpdatedAt))
                ) && 
                (
                    this.UserPhoneParameters == input.UserPhoneParameters ||
                    (this.UserPhoneParameters != null &&
                    this.UserPhoneParameters.Equals(input.UserPhoneParameters))
                ) && 
                (
                    this.UserSmsLogin == input.UserSmsLogin ||
                    (this.UserSmsLogin != null &&
                    this.UserSmsLogin.Equals(input.UserSmsLogin))
                ) && 
                (
                    this.UserSoftCall == input.UserSoftCall ||
                    (this.UserSoftCall != null &&
                    this.UserSoftCall.Equals(input.UserSoftCall))
                ) && 
                (
                    this.UserSupportCaseExpirationDateTime == input.UserSupportCaseExpirationDateTime ||
                    (this.UserSupportCaseExpirationDateTime != null &&
                    this.UserSupportCaseExpirationDateTime.Equals(input.UserSupportCaseExpirationDateTime))
                ) && 
                (
                    this.UserSupportCaseLatest == input.UserSupportCaseLatest ||
                    (this.UserSupportCaseLatest != null &&
                    this.UserSupportCaseLatest.Equals(input.UserSupportCaseLatest))
                ) && 
                (
                    this.UserSupportCaseNotificationType == input.UserSupportCaseNotificationType ||
                    (this.UserSupportCaseNotificationType != null &&
                    this.UserSupportCaseNotificationType.Equals(input.UserSupportCaseNotificationType))
                ) && 
                (
                    this.UserSupportCaseStatus == input.UserSupportCaseStatus ||
                    (this.UserSupportCaseStatus != null &&
                    this.UserSupportCaseStatus.Equals(input.UserSupportCaseStatus))
                ) && 
                (
                    this.UserSynchronizationMode == input.UserSynchronizationMode ||
                    (this.UserSynchronizationMode != null &&
                    this.UserSynchronizationMode.Equals(input.UserSynchronizationMode))
                ) && 
                (
                    this.UserTelephone == input.UserTelephone ||
                    (this.UserTelephone != null &&
                    this.UserTelephone.Equals(input.UserTelephone))
                ) && 
                (
                    this.UserTerritories == input.UserTerritories ||
                    (this.UserTerritories != null &&
                    this.UserTerritories.Equals(input.UserTerritories))
                ) && 
                (
                    this.UserTicket == input.UserTicket ||
                    (this.UserTicket != null &&
                    this.UserTicket.Equals(input.UserTicket))
                ) && 
                (
                    this.UserTicketExpirationDateTime == input.UserTicketExpirationDateTime ||
                    (this.UserTicketExpirationDateTime != null &&
                    this.UserTicketExpirationDateTime.Equals(input.UserTicketExpirationDateTime))
                ) && 
                (
                    this.UserTimeFormat == input.UserTimeFormat ||
                    (this.UserTimeFormat != null &&
                    this.UserTimeFormat.Equals(input.UserTimeFormat))
                ) && 
                (
                    this.UserTitle == input.UserTitle ||
                    (this.UserTitle != null &&
                    this.UserTitle.Equals(input.UserTitle))
                ) && 
                (
                    this.UserUpdatedAt == input.UserUpdatedAt ||
                    (this.UserUpdatedAt != null &&
                    this.UserUpdatedAt.Equals(input.UserUpdatedAt))
                ) && 
                (
                    this.UserUpdatedBy == input.UserUpdatedBy ||
                    (this.UserUpdatedBy != null &&
                    this.UserUpdatedBy.Equals(input.UserUpdatedBy))
                ) && 
                (
                    this.UserWrongPasswordCount == input.UserWrongPasswordCount ||
                    (this.UserWrongPasswordCount != null &&
                    this.UserWrongPasswordCount.Equals(input.UserWrongPasswordCount))
                ) && 
                (
                    this.UserCustom1 == input.UserCustom1 ||
                    (this.UserCustom1 != null &&
                    this.UserCustom1.Equals(input.UserCustom1))
                ) && 
                (
                    this.UserCustom2 == input.UserCustom2 ||
                    (this.UserCustom2 != null &&
                    this.UserCustom2.Equals(input.UserCustom2))
                ) && 
                (
                    this.UserCustom3 == input.UserCustom3 ||
                    (this.UserCustom3 != null &&
                    this.UserCustom3.Equals(input.UserCustom3))
                ) && 
                (
                    this.UserCustom4 == input.UserCustom4 ||
                    (this.UserCustom4 != null &&
                    this.UserCustom4.Equals(input.UserCustom4))
                ) && 
                (
                    this.UserCustom5 == input.UserCustom5 ||
                    (this.UserCustom5 != null &&
                    this.UserCustom5.Equals(input.UserCustom5))
                ) && 
                (
                    this.UserCustom6 == input.UserCustom6 ||
                    (this.UserCustom6 != null &&
                    this.UserCustom6.Equals(input.UserCustom6))
                ) && 
                (
                    this.UserCustom7 == input.UserCustom7 ||
                    (this.UserCustom7 != null &&
                    this.UserCustom7.Equals(input.UserCustom7))
                ) && 
                (
                    this.UserCustom8 == input.UserCustom8 ||
                    (this.UserCustom8 != null &&
                    this.UserCustom8.Equals(input.UserCustom8))
                ) && 
                (
                    this.UserCustom9 == input.UserCustom9 ||
                    (this.UserCustom9 != null &&
                    this.UserCustom9.Equals(input.UserCustom9))
                ) && 
                (
                    this.UserCustom10 == input.UserCustom10 ||
                    (this.UserCustom10 != null &&
                    this.UserCustom10.Equals(input.UserCustom10))
                ) && 
                (
                    this.UserCustom11 == input.UserCustom11 ||
                    (this.UserCustom11 != null &&
                    this.UserCustom11.Equals(input.UserCustom11))
                ) && 
                (
                    this.UserCustom12 == input.UserCustom12 ||
                    (this.UserCustom12 != null &&
                    this.UserCustom12.Equals(input.UserCustom12))
                ) && 
                (
                    this.UserCustom13 == input.UserCustom13 ||
                    (this.UserCustom13 != null &&
                    this.UserCustom13.Equals(input.UserCustom13))
                ) && 
                (
                    this.UserCustom14 == input.UserCustom14 ||
                    (this.UserCustom14 != null &&
                    this.UserCustom14.Equals(input.UserCustom14))
                ) && 
                (
                    this.UserCustom15 == input.UserCustom15 ||
                    (this.UserCustom15 != null &&
                    this.UserCustom15.Equals(input.UserCustom15))
                ) && 
                (
                    this.UserMemo == input.UserMemo ||
                    (this.UserMemo != null &&
                    this.UserMemo.Equals(input.UserMemo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserAccessId != null)
                    hashCode = hashCode * 59 + this.UserAccessId.GetHashCode();
                if (this.UserAccessLevel != null)
                    hashCode = hashCode * 59 + this.UserAccessLevel.GetHashCode();
                if (this.UserAddressFormat != null)
                    hashCode = hashCode * 59 + this.UserAddressFormat.GetHashCode();
                if (this.UserAdvancedGroups != null)
                    hashCode = hashCode * 59 + this.UserAdvancedGroups.GetHashCode();
                if (this.UserAuthenticationCode != null)
                    hashCode = hashCode * 59 + this.UserAuthenticationCode.GetHashCode();
                if (this.UserBccEmail != null)
                    hashCode = hashCode * 59 + this.UserBccEmail.GetHashCode();
                if (this.UserBccMode != null)
                    hashCode = hashCode * 59 + this.UserBccMode.GetHashCode();
                if (this.UserBccTag != null)
                    hashCode = hashCode * 59 + this.UserBccTag.GetHashCode();
                if (this.UserBudgetNote != null)
                    hashCode = hashCode * 59 + this.UserBudgetNote.GetHashCode();
                if (this.UserCalendarColorScheme != null)
                    hashCode = hashCode * 59 + this.UserCalendarColorScheme.GetHashCode();
                if (this.UserCreatedAt != null)
                    hashCode = hashCode * 59 + this.UserCreatedAt.GetHashCode();
                if (this.UserCreatedBy != null)
                    hashCode = hashCode * 59 + this.UserCreatedBy.GetHashCode();
                if (this.UserCurrencyName != null)
                    hashCode = hashCode * 59 + this.UserCurrencyName.GetHashCode();
                if (this.UserDateFormat != null)
                    hashCode = hashCode * 59 + this.UserDateFormat.GetHashCode();
                if (this.UserDecimalPoint != null)
                    hashCode = hashCode * 59 + this.UserDecimalPoint.GetHashCode();
                if (this.UserDefaultSupportCaseChannel != null)
                    hashCode = hashCode * 59 + this.UserDefaultSupportCaseChannel.GetHashCode();
                if (this.UserDefaultMemberGroupId != null)
                    hashCode = hashCode * 59 + this.UserDefaultMemberGroupId.GetHashCode();
                if (this.UserDefaultOpportunity2ndResponsible != null)
                    hashCode = hashCode * 59 + this.UserDefaultOpportunity2ndResponsible.GetHashCode();
                if (this.UserDefaultOrganisation2ndResponsible != null)
                    hashCode = hashCode * 59 + this.UserDefaultOrganisation2ndResponsible.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                if (this.UserGmtDifference != null)
                    hashCode = hashCode * 59 + this.UserGmtDifference.GetHashCode();
                if (this.UserGroupId != null)
                    hashCode = hashCode * 59 + this.UserGroupId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserInitials != null)
                    hashCode = hashCode * 59 + this.UserInitials.GetHashCode();
                if (this.UserIntegrationId != null)
                    hashCode = hashCode * 59 + this.UserIntegrationId.GetHashCode();
                if (this.UserIpRestrict != null)
                    hashCode = hashCode * 59 + this.UserIpRestrict.GetHashCode();
                if (this.UserIsRestApiEnabled != null)
                    hashCode = hashCode * 59 + this.UserIsRestApiEnabled.GetHashCode();
                if (this.UserIsSpellCheckerEnabled != null)
                    hashCode = hashCode * 59 + this.UserIsSpellCheckerEnabled.GetHashCode();
                if (this.UserIsSupportCaseAvailableStatusEnabled != null)
                    hashCode = hashCode * 59 + this.UserIsSupportCaseAvailableStatusEnabled.GetHashCode();
                if (this.UserLanguageId != null)
                    hashCode = hashCode * 59 + this.UserLanguageId.GetHashCode();
                if (this.UserLastLoginDateTime != null)
                    hashCode = hashCode * 59 + this.UserLastLoginDateTime.GetHashCode();
                if (this.UserLastTryDateTime != null)
                    hashCode = hashCode * 59 + this.UserLastTryDateTime.GetHashCode();
                if (this.UserLoginCount != null)
                    hashCode = hashCode * 59 + this.UserLoginCount.GetHashCode();
                if (this.UserLoginLog != null)
                    hashCode = hashCode * 59 + this.UserLoginLog.GetHashCode();
                if (this.UserLoginName != null)
                    hashCode = hashCode * 59 + this.UserLoginName.GetHashCode();
                if (this.UserMobilePhone != null)
                    hashCode = hashCode * 59 + this.UserMobilePhone.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.UserPassword != null)
                    hashCode = hashCode * 59 + this.UserPassword.GetHashCode();
                if (this.UserPasswordInUrl != null)
                    hashCode = hashCode * 59 + this.UserPasswordInUrl.GetHashCode();
                if (this.UserPasswordUpdatedAt != null)
                    hashCode = hashCode * 59 + this.UserPasswordUpdatedAt.GetHashCode();
                if (this.UserPhoneParameters != null)
                    hashCode = hashCode * 59 + this.UserPhoneParameters.GetHashCode();
                if (this.UserSmsLogin != null)
                    hashCode = hashCode * 59 + this.UserSmsLogin.GetHashCode();
                if (this.UserSoftCall != null)
                    hashCode = hashCode * 59 + this.UserSoftCall.GetHashCode();
                if (this.UserSupportCaseExpirationDateTime != null)
                    hashCode = hashCode * 59 + this.UserSupportCaseExpirationDateTime.GetHashCode();
                if (this.UserSupportCaseLatest != null)
                    hashCode = hashCode * 59 + this.UserSupportCaseLatest.GetHashCode();
                if (this.UserSupportCaseNotificationType != null)
                    hashCode = hashCode * 59 + this.UserSupportCaseNotificationType.GetHashCode();
                if (this.UserSupportCaseStatus != null)
                    hashCode = hashCode * 59 + this.UserSupportCaseStatus.GetHashCode();
                if (this.UserSynchronizationMode != null)
                    hashCode = hashCode * 59 + this.UserSynchronizationMode.GetHashCode();
                if (this.UserTelephone != null)
                    hashCode = hashCode * 59 + this.UserTelephone.GetHashCode();
                if (this.UserTerritories != null)
                    hashCode = hashCode * 59 + this.UserTerritories.GetHashCode();
                if (this.UserTicket != null)
                    hashCode = hashCode * 59 + this.UserTicket.GetHashCode();
                if (this.UserTicketExpirationDateTime != null)
                    hashCode = hashCode * 59 + this.UserTicketExpirationDateTime.GetHashCode();
                if (this.UserTimeFormat != null)
                    hashCode = hashCode * 59 + this.UserTimeFormat.GetHashCode();
                if (this.UserTitle != null)
                    hashCode = hashCode * 59 + this.UserTitle.GetHashCode();
                if (this.UserUpdatedAt != null)
                    hashCode = hashCode * 59 + this.UserUpdatedAt.GetHashCode();
                if (this.UserUpdatedBy != null)
                    hashCode = hashCode * 59 + this.UserUpdatedBy.GetHashCode();
                if (this.UserWrongPasswordCount != null)
                    hashCode = hashCode * 59 + this.UserWrongPasswordCount.GetHashCode();
                if (this.UserCustom1 != null)
                    hashCode = hashCode * 59 + this.UserCustom1.GetHashCode();
                if (this.UserCustom2 != null)
                    hashCode = hashCode * 59 + this.UserCustom2.GetHashCode();
                if (this.UserCustom3 != null)
                    hashCode = hashCode * 59 + this.UserCustom3.GetHashCode();
                if (this.UserCustom4 != null)
                    hashCode = hashCode * 59 + this.UserCustom4.GetHashCode();
                if (this.UserCustom5 != null)
                    hashCode = hashCode * 59 + this.UserCustom5.GetHashCode();
                if (this.UserCustom6 != null)
                    hashCode = hashCode * 59 + this.UserCustom6.GetHashCode();
                if (this.UserCustom7 != null)
                    hashCode = hashCode * 59 + this.UserCustom7.GetHashCode();
                if (this.UserCustom8 != null)
                    hashCode = hashCode * 59 + this.UserCustom8.GetHashCode();
                if (this.UserCustom9 != null)
                    hashCode = hashCode * 59 + this.UserCustom9.GetHashCode();
                if (this.UserCustom10 != null)
                    hashCode = hashCode * 59 + this.UserCustom10.GetHashCode();
                if (this.UserCustom11 != null)
                    hashCode = hashCode * 59 + this.UserCustom11.GetHashCode();
                if (this.UserCustom12 != null)
                    hashCode = hashCode * 59 + this.UserCustom12.GetHashCode();
                if (this.UserCustom13 != null)
                    hashCode = hashCode * 59 + this.UserCustom13.GetHashCode();
                if (this.UserCustom14 != null)
                    hashCode = hashCode * 59 + this.UserCustom14.GetHashCode();
                if (this.UserCustom15 != null)
                    hashCode = hashCode * 59 + this.UserCustom15.GetHashCode();
                if (this.UserMemo != null)
                    hashCode = hashCode * 59 + this.UserMemo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
