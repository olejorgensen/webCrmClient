/* 
 * webCRM REST API
 *
 * Version: 1.0.0.0.<br>Note that you can access live data through this web site, so be careful when updating or deleting things.
 *
 * OpenAPI spec version: v1
 * Contact: api@webcrm.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;

namespace WebCrm.Rest.Model
{
    /// <summary>
    /// TimeExpenseDto
    /// </summary>
    [DataContract]
    public partial class TimeExpenseDto : BaseObject, IEquatable<TimeExpenseDto>, IValidatableObject
    {
        /// <summary>
        /// Defines TimeExpenseType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeExpenseTypeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum T for value: T
            /// </summary>
            [EnumMember(Value = "T")]
            T = 2,
            
            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 3,
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 4,
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 5,
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 6,
            
            /// <summary>
            /// Enum Time for value: Time
            /// </summary>
            [EnumMember(Value = "Time")]
            Time = 7
        }

        /// <summary>
        /// Gets or Sets TimeExpenseType
        /// </summary>
        [DataMember(Name="TimeExpenseType", EmitDefaultValue=false)]
        public TimeExpenseTypeEnum? TimeExpenseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeExpenseDto" /> class.
        /// </summary>
        [JsonConstructor]
        protected TimeExpenseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeExpenseDto" /> class.
        /// </summary>
        /// <param name="TimeExpenseBillableHours">TimeExpenseBillableHours.</param>
        /// <param name="TimeExpenseCreatedAt">TimeExpenseCreatedAt.</param>
        /// <param name="TimeExpenseCreatedBy">TimeExpenseCreatedBy.</param>
        /// <param name="TimeExpenseDate">TimeExpenseDate.</param>
        /// <param name="TimeExpenseEndDate">TimeExpenseEndDate.</param>
        /// <param name="TimeExpenseFixedPrice">TimeExpenseFixedPrice.</param>
        /// <param name="TimeExpenseFixedPriceText">TimeExpenseFixedPriceText.</param>
        /// <param name="TimeExpenseId">TimeExpenseId (required).</param>
        /// <param name="TimeExpenseMilestoneId">TimeExpenseMilestoneId.</param>
        /// <param name="TimeExpenseOpportunityId">TimeExpenseOpportunityId.</param>
        /// <param name="TimeExpenseOrganisationId">TimeExpenseOrganisationId.</param>
        /// <param name="TimeExpenseOvertimeBillableHours">TimeExpenseOvertimeBillableHours.</param>
        /// <param name="TimeExpenseStartDate">TimeExpenseStartDate.</param>
        /// <param name="TimeExpenseText">TimeExpenseText.</param>
        /// <param name="TimeExpenseTravelHours">TimeExpenseTravelHours.</param>
        /// <param name="TimeExpenseType">TimeExpenseType.</param>
        /// <param name="TimeExpenseUpdatedAt">TimeExpenseUpdatedAt.</param>
        /// <param name="TimeExpenseUpdatedBy">TimeExpenseUpdatedBy.</param>
        /// <param name="TimeExpenseUserId">TimeExpenseUserId.</param>
        /// <param name="TimeExpenseWorkHours">TimeExpenseWorkHours.</param>
        public TimeExpenseDto(double? TimeExpenseBillableHours = default(double?), DateTime? TimeExpenseCreatedAt = default(DateTime?), string TimeExpenseCreatedBy = default(string), DateTime? TimeExpenseDate = default(DateTime?), DateTime? TimeExpenseEndDate = default(DateTime?), double? TimeExpenseFixedPrice = default(double?), string TimeExpenseFixedPriceText = default(string), int? TimeExpenseId = default(int?), int? TimeExpenseMilestoneId = default(int?), int? TimeExpenseOpportunityId = default(int?), int? TimeExpenseOrganisationId = default(int?), double? TimeExpenseOvertimeBillableHours = default(double?), DateTime? TimeExpenseStartDate = default(DateTime?), string TimeExpenseText = default(string), double? TimeExpenseTravelHours = default(double?), TimeExpenseTypeEnum? TimeExpenseType = default(TimeExpenseTypeEnum?), DateTime? TimeExpenseUpdatedAt = default(DateTime?), string TimeExpenseUpdatedBy = default(string), int? TimeExpenseUserId = default(int?), double? TimeExpenseWorkHours = default(double?))
        {
            // to ensure "TimeExpenseId" is required (not null)
            if (TimeExpenseId == null)
            {
                throw new InvalidDataException("TimeExpenseId is a required property for TimeExpenseDto and cannot be null");
            }
            else
            {
                this.TimeExpenseId = TimeExpenseId;
            }
            this.TimeExpenseBillableHours = TimeExpenseBillableHours;
            this.TimeExpenseCreatedAt = TimeExpenseCreatedAt;
            this.TimeExpenseCreatedBy = TimeExpenseCreatedBy;
            this.TimeExpenseDate = TimeExpenseDate;
            this.TimeExpenseEndDate = TimeExpenseEndDate;
            this.TimeExpenseFixedPrice = TimeExpenseFixedPrice;
            this.TimeExpenseFixedPriceText = TimeExpenseFixedPriceText;
            this.TimeExpenseMilestoneId = TimeExpenseMilestoneId;
            this.TimeExpenseOpportunityId = TimeExpenseOpportunityId;
            this.TimeExpenseOrganisationId = TimeExpenseOrganisationId;
            this.TimeExpenseOvertimeBillableHours = TimeExpenseOvertimeBillableHours;
            this.TimeExpenseStartDate = TimeExpenseStartDate;
            this.TimeExpenseText = TimeExpenseText;
            this.TimeExpenseTravelHours = TimeExpenseTravelHours;
            this.TimeExpenseType = TimeExpenseType;
            this.TimeExpenseUpdatedAt = TimeExpenseUpdatedAt;
            this.TimeExpenseUpdatedBy = TimeExpenseUpdatedBy;
            this.TimeExpenseUserId = TimeExpenseUserId;
            this.TimeExpenseWorkHours = TimeExpenseWorkHours;
        }
        
        /// <summary>
        /// Gets or Sets TimeExpenseBillableHours
        /// </summary>
        [DataMember(Name="TimeExpenseBillableHours", EmitDefaultValue=false)]
        public double? TimeExpenseBillableHours { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseCreatedAt
        /// </summary>
        [DataMember(Name="TimeExpenseCreatedAt", EmitDefaultValue=false)]
        public DateTime? TimeExpenseCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseCreatedBy
        /// </summary>
        [DataMember(Name="TimeExpenseCreatedBy", EmitDefaultValue=false)]
        public string TimeExpenseCreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseDate
        /// </summary>
        [DataMember(Name="TimeExpenseDate", EmitDefaultValue=false)]
        public DateTime? TimeExpenseDate { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseEndDate
        /// </summary>
        [DataMember(Name="TimeExpenseEndDate", EmitDefaultValue=false)]
        public DateTime? TimeExpenseEndDate { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseFixedPrice
        /// </summary>
        [DataMember(Name="TimeExpenseFixedPrice", EmitDefaultValue=false)]
        public double? TimeExpenseFixedPrice { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseFixedPriceText
        /// </summary>
        [DataMember(Name="TimeExpenseFixedPriceText", EmitDefaultValue=false)]
        public string TimeExpenseFixedPriceText { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseId
        /// </summary>
        [DataMember(Name="TimeExpenseId", EmitDefaultValue=false)]
        public int? TimeExpenseId { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseMilestoneId
        /// </summary>
        [DataMember(Name="TimeExpenseMilestoneId", EmitDefaultValue=false)]
        public int? TimeExpenseMilestoneId { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseOpportunityId
        /// </summary>
        [DataMember(Name="TimeExpenseOpportunityId", EmitDefaultValue=false)]
        public int? TimeExpenseOpportunityId { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseOrganisationId
        /// </summary>
        [DataMember(Name="TimeExpenseOrganisationId", EmitDefaultValue=false)]
        public int? TimeExpenseOrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseOvertimeBillableHours
        /// </summary>
        [DataMember(Name="TimeExpenseOvertimeBillableHours", EmitDefaultValue=false)]
        public double? TimeExpenseOvertimeBillableHours { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseStartDate
        /// </summary>
        [DataMember(Name="TimeExpenseStartDate", EmitDefaultValue=false)]
        public DateTime? TimeExpenseStartDate { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseText
        /// </summary>
        [DataMember(Name="TimeExpenseText", EmitDefaultValue=false)]
        public string TimeExpenseText { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseTravelHours
        /// </summary>
        [DataMember(Name="TimeExpenseTravelHours", EmitDefaultValue=false)]
        public double? TimeExpenseTravelHours { get; set; }


        /// <summary>
        /// Gets or Sets TimeExpenseUpdatedAt
        /// </summary>
        [DataMember(Name="TimeExpenseUpdatedAt", EmitDefaultValue=false)]
        public DateTime? TimeExpenseUpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseUpdatedBy
        /// </summary>
        [DataMember(Name="TimeExpenseUpdatedBy", EmitDefaultValue=false)]
        public string TimeExpenseUpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseUserId
        /// </summary>
        [DataMember(Name="TimeExpenseUserId", EmitDefaultValue=false)]
        public int? TimeExpenseUserId { get; set; }

        /// <summary>
        /// Gets or Sets TimeExpenseWorkHours
        /// </summary>
        [DataMember(Name="TimeExpenseWorkHours", EmitDefaultValue=false)]
        public double? TimeExpenseWorkHours { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeExpenseDto);
        }

        /// <summary>
        /// Returns true if TimeExpenseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeExpenseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeExpenseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeExpenseBillableHours == input.TimeExpenseBillableHours ||
                    (this.TimeExpenseBillableHours != null &&
                    this.TimeExpenseBillableHours.Equals(input.TimeExpenseBillableHours))
                ) && 
                (
                    this.TimeExpenseCreatedAt == input.TimeExpenseCreatedAt ||
                    (this.TimeExpenseCreatedAt != null &&
                    this.TimeExpenseCreatedAt.Equals(input.TimeExpenseCreatedAt))
                ) && 
                (
                    this.TimeExpenseCreatedBy == input.TimeExpenseCreatedBy ||
                    (this.TimeExpenseCreatedBy != null &&
                    this.TimeExpenseCreatedBy.Equals(input.TimeExpenseCreatedBy))
                ) && 
                (
                    this.TimeExpenseDate == input.TimeExpenseDate ||
                    (this.TimeExpenseDate != null &&
                    this.TimeExpenseDate.Equals(input.TimeExpenseDate))
                ) && 
                (
                    this.TimeExpenseEndDate == input.TimeExpenseEndDate ||
                    (this.TimeExpenseEndDate != null &&
                    this.TimeExpenseEndDate.Equals(input.TimeExpenseEndDate))
                ) && 
                (
                    this.TimeExpenseFixedPrice == input.TimeExpenseFixedPrice ||
                    (this.TimeExpenseFixedPrice != null &&
                    this.TimeExpenseFixedPrice.Equals(input.TimeExpenseFixedPrice))
                ) && 
                (
                    this.TimeExpenseFixedPriceText == input.TimeExpenseFixedPriceText ||
                    (this.TimeExpenseFixedPriceText != null &&
                    this.TimeExpenseFixedPriceText.Equals(input.TimeExpenseFixedPriceText))
                ) && 
                (
                    this.TimeExpenseId == input.TimeExpenseId ||
                    (this.TimeExpenseId != null &&
                    this.TimeExpenseId.Equals(input.TimeExpenseId))
                ) && 
                (
                    this.TimeExpenseMilestoneId == input.TimeExpenseMilestoneId ||
                    (this.TimeExpenseMilestoneId != null &&
                    this.TimeExpenseMilestoneId.Equals(input.TimeExpenseMilestoneId))
                ) && 
                (
                    this.TimeExpenseOpportunityId == input.TimeExpenseOpportunityId ||
                    (this.TimeExpenseOpportunityId != null &&
                    this.TimeExpenseOpportunityId.Equals(input.TimeExpenseOpportunityId))
                ) && 
                (
                    this.TimeExpenseOrganisationId == input.TimeExpenseOrganisationId ||
                    (this.TimeExpenseOrganisationId != null &&
                    this.TimeExpenseOrganisationId.Equals(input.TimeExpenseOrganisationId))
                ) && 
                (
                    this.TimeExpenseOvertimeBillableHours == input.TimeExpenseOvertimeBillableHours ||
                    (this.TimeExpenseOvertimeBillableHours != null &&
                    this.TimeExpenseOvertimeBillableHours.Equals(input.TimeExpenseOvertimeBillableHours))
                ) && 
                (
                    this.TimeExpenseStartDate == input.TimeExpenseStartDate ||
                    (this.TimeExpenseStartDate != null &&
                    this.TimeExpenseStartDate.Equals(input.TimeExpenseStartDate))
                ) && 
                (
                    this.TimeExpenseText == input.TimeExpenseText ||
                    (this.TimeExpenseText != null &&
                    this.TimeExpenseText.Equals(input.TimeExpenseText))
                ) && 
                (
                    this.TimeExpenseTravelHours == input.TimeExpenseTravelHours ||
                    (this.TimeExpenseTravelHours != null &&
                    this.TimeExpenseTravelHours.Equals(input.TimeExpenseTravelHours))
                ) && 
                (
                    this.TimeExpenseType == input.TimeExpenseType ||
                    (this.TimeExpenseType != null &&
                    this.TimeExpenseType.Equals(input.TimeExpenseType))
                ) && 
                (
                    this.TimeExpenseUpdatedAt == input.TimeExpenseUpdatedAt ||
                    (this.TimeExpenseUpdatedAt != null &&
                    this.TimeExpenseUpdatedAt.Equals(input.TimeExpenseUpdatedAt))
                ) && 
                (
                    this.TimeExpenseUpdatedBy == input.TimeExpenseUpdatedBy ||
                    (this.TimeExpenseUpdatedBy != null &&
                    this.TimeExpenseUpdatedBy.Equals(input.TimeExpenseUpdatedBy))
                ) && 
                (
                    this.TimeExpenseUserId == input.TimeExpenseUserId ||
                    (this.TimeExpenseUserId != null &&
                    this.TimeExpenseUserId.Equals(input.TimeExpenseUserId))
                ) && 
                (
                    this.TimeExpenseWorkHours == input.TimeExpenseWorkHours ||
                    (this.TimeExpenseWorkHours != null &&
                    this.TimeExpenseWorkHours.Equals(input.TimeExpenseWorkHours))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeExpenseBillableHours != null)
                    hashCode = hashCode * 59 + this.TimeExpenseBillableHours.GetHashCode();
                if (this.TimeExpenseCreatedAt != null)
                    hashCode = hashCode * 59 + this.TimeExpenseCreatedAt.GetHashCode();
                if (this.TimeExpenseCreatedBy != null)
                    hashCode = hashCode * 59 + this.TimeExpenseCreatedBy.GetHashCode();
                if (this.TimeExpenseDate != null)
                    hashCode = hashCode * 59 + this.TimeExpenseDate.GetHashCode();
                if (this.TimeExpenseEndDate != null)
                    hashCode = hashCode * 59 + this.TimeExpenseEndDate.GetHashCode();
                if (this.TimeExpenseFixedPrice != null)
                    hashCode = hashCode * 59 + this.TimeExpenseFixedPrice.GetHashCode();
                if (this.TimeExpenseFixedPriceText != null)
                    hashCode = hashCode * 59 + this.TimeExpenseFixedPriceText.GetHashCode();
                if (this.TimeExpenseId != null)
                    hashCode = hashCode * 59 + this.TimeExpenseId.GetHashCode();
                if (this.TimeExpenseMilestoneId != null)
                    hashCode = hashCode * 59 + this.TimeExpenseMilestoneId.GetHashCode();
                if (this.TimeExpenseOpportunityId != null)
                    hashCode = hashCode * 59 + this.TimeExpenseOpportunityId.GetHashCode();
                if (this.TimeExpenseOrganisationId != null)
                    hashCode = hashCode * 59 + this.TimeExpenseOrganisationId.GetHashCode();
                if (this.TimeExpenseOvertimeBillableHours != null)
                    hashCode = hashCode * 59 + this.TimeExpenseOvertimeBillableHours.GetHashCode();
                if (this.TimeExpenseStartDate != null)
                    hashCode = hashCode * 59 + this.TimeExpenseStartDate.GetHashCode();
                if (this.TimeExpenseText != null)
                    hashCode = hashCode * 59 + this.TimeExpenseText.GetHashCode();
                if (this.TimeExpenseTravelHours != null)
                    hashCode = hashCode * 59 + this.TimeExpenseTravelHours.GetHashCode();
                if (this.TimeExpenseType != null)
                    hashCode = hashCode * 59 + this.TimeExpenseType.GetHashCode();
                if (this.TimeExpenseUpdatedAt != null)
                    hashCode = hashCode * 59 + this.TimeExpenseUpdatedAt.GetHashCode();
                if (this.TimeExpenseUpdatedBy != null)
                    hashCode = hashCode * 59 + this.TimeExpenseUpdatedBy.GetHashCode();
                if (this.TimeExpenseUserId != null)
                    hashCode = hashCode * 59 + this.TimeExpenseUserId.GetHashCode();
                if (this.TimeExpenseWorkHours != null)
                    hashCode = hashCode * 59 + this.TimeExpenseWorkHours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
