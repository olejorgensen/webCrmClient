/* 
 * webCRM REST API
 *
 * Version: 1.0.0.0.<br>Note that you can access live data through this web site, so be careful when updating or deleting things.
 *
 * OpenAPI spec version: v1
 * Contact: api@webcrm.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;

namespace WebCrm.Rest.Model
{
    /// <summary>
    /// SupportCaseEmailDto
    /// </summary>
    [DataContract]
    public partial class SupportCaseEmailDto : BaseObject, IEquatable<SupportCaseEmailDto>, IValidatableObject
    {
        /// <summary>
        /// Defines EmailSupportDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EmailSupportDirectionEnum
        {
            
            /// <summary>
            /// Enum Outbound for value: Outbound
            /// </summary>
            [EnumMember(Value = "Outbound")]
            Outbound = 1,
            
            /// <summary>
            /// Enum Inbound for value: Inbound
            /// </summary>
            [EnumMember(Value = "Inbound")]
            Inbound = 2
        }

        /// <summary>
        /// Gets or Sets EmailSupportDirection
        /// </summary>
        [DataMember(Name="EmailSupportDirection", EmitDefaultValue=false)]
        public EmailSupportDirectionEnum? EmailSupportDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportCaseEmailDto" /> class.
        /// </summary>
        [JsonConstructor]
        protected SupportCaseEmailDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportCaseEmailDto" /> class.
        /// </summary>
        /// <param name="EmailSupportAttachmentsString">EmailSupportAttachmentsString.</param>
        /// <param name="EmailSupportBody">EmailSupportBody.</param>
        /// <param name="EmailSupportDateTime">EmailSupportDateTime.</param>
        /// <param name="EmailSupportDirection">EmailSupportDirection.</param>
        /// <param name="EmailSupportId">EmailSupportId (required).</param>
        /// <param name="EmailSupportOrganisationId">EmailSupportOrganisationId.</param>
        /// <param name="EmailSupportSenderId">EmailSupportSenderId.</param>
        /// <param name="EmailSupportSenderName">EmailSupportSenderName.</param>
        /// <param name="EmailSupportSubject">EmailSupportSubject.</param>
        /// <param name="EmailSupportSupportCaseId">EmailSupportSupportCaseId.</param>
        public SupportCaseEmailDto(string EmailSupportAttachmentsString = default(string), string EmailSupportBody = default(string), DateTime? EmailSupportDateTime = default(DateTime?), EmailSupportDirectionEnum? EmailSupportDirection = default(EmailSupportDirectionEnum?), int? EmailSupportId = default(int?), int? EmailSupportOrganisationId = default(int?), int? EmailSupportSenderId = default(int?), string EmailSupportSenderName = default(string), string EmailSupportSubject = default(string), int? EmailSupportSupportCaseId = default(int?))
        {
            // to ensure "EmailSupportId" is required (not null)
            if (EmailSupportId == null)
            {
                throw new InvalidDataException("EmailSupportId is a required property for SupportCaseEmailDto and cannot be null");
            }
            else
            {
                this.EmailSupportId = EmailSupportId;
            }
            this.EmailSupportAttachmentsString = EmailSupportAttachmentsString;
            this.EmailSupportBody = EmailSupportBody;
            this.EmailSupportDateTime = EmailSupportDateTime;
            this.EmailSupportDirection = EmailSupportDirection;
            this.EmailSupportOrganisationId = EmailSupportOrganisationId;
            this.EmailSupportSenderId = EmailSupportSenderId;
            this.EmailSupportSenderName = EmailSupportSenderName;
            this.EmailSupportSubject = EmailSupportSubject;
            this.EmailSupportSupportCaseId = EmailSupportSupportCaseId;
        }
        
        /// <summary>
        /// Gets or Sets EmailSupportAttachmentsString
        /// </summary>
        [DataMember(Name="EmailSupportAttachmentsString", EmitDefaultValue=false)]
        public string EmailSupportAttachmentsString { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportBody
        /// </summary>
        [DataMember(Name="EmailSupportBody", EmitDefaultValue=false)]
        public string EmailSupportBody { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportDateTime
        /// </summary>
        [DataMember(Name="EmailSupportDateTime", EmitDefaultValue=false)]
        public DateTime? EmailSupportDateTime { get; set; }


        /// <summary>
        /// Gets or Sets EmailSupportId
        /// </summary>
        [DataMember(Name="EmailSupportId", EmitDefaultValue=false)]
        public int? EmailSupportId { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportOrganisationId
        /// </summary>
        [DataMember(Name="EmailSupportOrganisationId", EmitDefaultValue=false)]
        public int? EmailSupportOrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportSenderId
        /// </summary>
        [DataMember(Name="EmailSupportSenderId", EmitDefaultValue=false)]
        public int? EmailSupportSenderId { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportSenderName
        /// </summary>
        [DataMember(Name="EmailSupportSenderName", EmitDefaultValue=false)]
        public string EmailSupportSenderName { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportSubject
        /// </summary>
        [DataMember(Name="EmailSupportSubject", EmitDefaultValue=false)]
        public string EmailSupportSubject { get; set; }

        /// <summary>
        /// Gets or Sets EmailSupportSupportCaseId
        /// </summary>
        [DataMember(Name="EmailSupportSupportCaseId", EmitDefaultValue=false)]
        public int? EmailSupportSupportCaseId { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportCaseEmailDto);
        }

        /// <summary>
        /// Returns true if SupportCaseEmailDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportCaseEmailDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportCaseEmailDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailSupportAttachmentsString == input.EmailSupportAttachmentsString ||
                    (this.EmailSupportAttachmentsString != null &&
                    this.EmailSupportAttachmentsString.Equals(input.EmailSupportAttachmentsString))
                ) && 
                (
                    this.EmailSupportBody == input.EmailSupportBody ||
                    (this.EmailSupportBody != null &&
                    this.EmailSupportBody.Equals(input.EmailSupportBody))
                ) && 
                (
                    this.EmailSupportDateTime == input.EmailSupportDateTime ||
                    (this.EmailSupportDateTime != null &&
                    this.EmailSupportDateTime.Equals(input.EmailSupportDateTime))
                ) && 
                (
                    this.EmailSupportDirection == input.EmailSupportDirection ||
                    (this.EmailSupportDirection != null &&
                    this.EmailSupportDirection.Equals(input.EmailSupportDirection))
                ) && 
                (
                    this.EmailSupportId == input.EmailSupportId ||
                    (this.EmailSupportId != null &&
                    this.EmailSupportId.Equals(input.EmailSupportId))
                ) && 
                (
                    this.EmailSupportOrganisationId == input.EmailSupportOrganisationId ||
                    (this.EmailSupportOrganisationId != null &&
                    this.EmailSupportOrganisationId.Equals(input.EmailSupportOrganisationId))
                ) && 
                (
                    this.EmailSupportSenderId == input.EmailSupportSenderId ||
                    (this.EmailSupportSenderId != null &&
                    this.EmailSupportSenderId.Equals(input.EmailSupportSenderId))
                ) && 
                (
                    this.EmailSupportSenderName == input.EmailSupportSenderName ||
                    (this.EmailSupportSenderName != null &&
                    this.EmailSupportSenderName.Equals(input.EmailSupportSenderName))
                ) && 
                (
                    this.EmailSupportSubject == input.EmailSupportSubject ||
                    (this.EmailSupportSubject != null &&
                    this.EmailSupportSubject.Equals(input.EmailSupportSubject))
                ) && 
                (
                    this.EmailSupportSupportCaseId == input.EmailSupportSupportCaseId ||
                    (this.EmailSupportSupportCaseId != null &&
                    this.EmailSupportSupportCaseId.Equals(input.EmailSupportSupportCaseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailSupportAttachmentsString != null)
                    hashCode = hashCode * 59 + this.EmailSupportAttachmentsString.GetHashCode();
                if (this.EmailSupportBody != null)
                    hashCode = hashCode * 59 + this.EmailSupportBody.GetHashCode();
                if (this.EmailSupportDateTime != null)
                    hashCode = hashCode * 59 + this.EmailSupportDateTime.GetHashCode();
                if (this.EmailSupportDirection != null)
                    hashCode = hashCode * 59 + this.EmailSupportDirection.GetHashCode();
                if (this.EmailSupportId != null)
                    hashCode = hashCode * 59 + this.EmailSupportId.GetHashCode();
                if (this.EmailSupportOrganisationId != null)
                    hashCode = hashCode * 59 + this.EmailSupportOrganisationId.GetHashCode();
                if (this.EmailSupportSenderId != null)
                    hashCode = hashCode * 59 + this.EmailSupportSenderId.GetHashCode();
                if (this.EmailSupportSenderName != null)
                    hashCode = hashCode * 59 + this.EmailSupportSenderName.GetHashCode();
                if (this.EmailSupportSubject != null)
                    hashCode = hashCode * 59 + this.EmailSupportSubject.GetHashCode();
                if (this.EmailSupportSupportCaseId != null)
                    hashCode = hashCode * 59 + this.EmailSupportSupportCaseId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
